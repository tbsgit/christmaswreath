<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="QN%o*7*9*|CWulQ?~6m~">speed</variable><variable id="#f}v),qFh5WQLUbqM^8G">ring2</variable><variable id="44mPi^agBwp}Bja[zzZ8">colorList</variable></variables><block type="lists_create_with" id="TL96gdde@v*VxnJ5==2l" disabled="true" x="0" y="0"><mutation items="3" horizontalafter="3"/></block><block type="pxt-on-start" id="*{=[yFJtuM:huzxbGNx(" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="aiZ7N(ep6k#h6)A^FEc)" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let speed = 0" numlines="1" declaredvars="speed"></mutation><next><block type="typescript_statement" id="YzW{=8iaN.q?wvJ-8rEv" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum LEDMode {" line1="    //% block=&quot;Rainbow2 Mode&quot;" line2="    Rainbow = 0," line3="    //% block=&quot;Equalizer Mode&quot;" line4="    Equalizer = 1," line5="    //% block=&quot;Breath Mode&quot;" line6="    Breath = 2," line7="    //% block=&quot;Directional Mode&quot;" line8="    Rise = 3," line9="    //% block=&quot;Free Mode&quot;" line10="    Free = 4" line11="}" numlines="12"></mutation><next><block type="typescript_statement" id="](VhtF$+b+4Q5,5JBU:T" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Level {" line1="    //% block=&quot;Level 1&quot;" line2="    Level_1 = 0," line3="    //% block=&quot;Level 2&quot;" line4="    Level_2 = 1," line5="    //% block=&quot;Level 3&quot;" line6="    Level_3 = 2," line7="    //% block=&quot;Level 4&quot;" line8="    Level_4 = 3," line9="    //% block=&quot;Level 5&quot;" line10="    Level_5 = 4," line11="    //% block=&quot;Level 6&quot;" line12="    Level_6 = 5," line13="    //% block=&quot;Level 7&quot;" line14="    Level_7 = 6," line15="    //% block=&quot;Level 6&quot;" line16="    Level_8 = 7," line17="    //% block=&quot;Level 9&quot;" line18="    Level_9 = 8," line19="    //% block=&quot;Level 10&quot;" line20="    Level_10 = 9," line21="    //% block=&quot;Level 11&quot;" line22="    Level_11 = 10," line23="    //% block=&quot;Level 12&quot;" line24="    Level_12 = 11," line25="    //% block=&quot;Level 13&quot;" line26="    Level_13 = 12," line27="    //% block=&quot;Level 14&quot;" line28="    Level_14 = 13," line29="    //% block=&quot;Level 15&quot;" line30="    Level_15 = 14" line31="}" numlines="32"></mutation><next><block type="typescript_statement" id="_n#m[zYW~jS[a+Ccx=}}" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ChristmasWreath {" line1="    /**" line2="     * A ChristmasWreath ring" line3="     */" line4="" line5="    class RGBVector3 {" line6="        public r: number;" line7="        public g: number;" line8="        public b: number;" line9="" line10="        constructor(r: number, g: number, b: number) {" line11="            this.r = r;" line12="            this.g = g;" line13="            this.b = b;" line14="        }" line15="    }" line16="" line17="    export class ChristmasWreath {" line18="        mode: LEDMode;" line19="        strip: neopixel.Strip;" line20="        //numOfLEDs: number;" line21="        totalNumLeds: number;" line22="        numOfLEDPerPillar: number;" line23="" line24="        private _colorStep: number;" line25="" line26="        private _lastMicVal: number;" line27="        private _colorOffset: number;" line28="" line29="        rainbowSpeed: number;" line30="        private _isSetupRainbow: boolean;" line31="" line32="" line33="        private _breathT: number;" line34="        private _breathDir: number;" line35="        private _breathColorOffset: number;" line36="" line37="        private _riseDuration: number;" line38="        private _riseState: number[];" line39="        private _riseColor: number[];" line40="" line41="        private _colorList: number[];" line42="" line43="" line44="        public updateVars(): void {" line45="            this._colorStep = 360 / this.numOfLEDPerPillar;" line46="            this._colorOffset = 0;" line47="            this._lastMicVal = -1;" line48="            this._breathT = 0;" line49="            this._breathDir = 1;" line50="            this._breathColorOffset = 0;" line51="" line52="            this._riseState = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]" line53="            this._riseColor = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]" line54="            this._riseDuration = 3;" line55="" line56="        }" line57="" line58="" line59=" " line60="" line61="" line62="        /**" line63="         * Clear strip led color" line64="         */" line65="        //% blockId=&quot;christmasring_clearStrip&quot; block=&quot;%ring clear led color&quot;" line66="        //% ring.defl=ring" line67="        //% weight=90 blockGap=8" line68="        //% parts=&quot;christmasring&quot;" line69="        public clearStrip(): void {" line70="            this.strip.clear();" line71="        }" line72="" line73="        /**" line74="         * Show strip led color" line75="         */" line76="        //% blockId=&quot;christmasring_showStrip&quot; block=&quot;%ring show led color&quot;" line77="        //% ring.defl=ring" line78="        //% weight=90 blockGap=8" line79="        //% parts=&quot;christmasring&quot;" line80="        public showStrip(): void {" line81="            this.strip.show();" line82="        }" line83="" line84="        /**" line85="         * Shows a rainbow pattern on all LEDs." line86="         * @param startHue the start hue value for the rainbow, eg: 1" line87="         * @param endHue the end hue value for the rainbow, eg: 360" line88="         */" line89="        //% blockId=&quot;christmasring_changeMode&quot; block=&quot;%ring|change mode to %mode&quot;" line90="        //% ring.defl=ring" line91="        //% weight=85 blockGap=8" line92="        //% parts=&quot;christmasring&quot;" line93="        public changeMode(m: LEDMode): void {" line94="            this._isSetupRainbow = false;" line95="            this.mode = m;" line96="        }" line97="" line98="        /**" line99="         * Shows a rainbow pattern on all LEDs." line100="         * @param startHue the start hue value for the rainbow, eg: 1" line101="         * @param endHue the end hue value for the rainbow, eg: 360" line102="         */" line103="        //% blockId=&quot;christmasring_rotatePixelColor&quot; block=&quot;%ring|move pixel by %mode|pixel&quot;" line104="        //% ring.defl=ring" line105="        //% weight=85 blockGap=8" line106="        //% parts=&quot;christmasring&quot;" line107="        public rotatePixelColor(speed: number): void {" line108="            this.rainbowSpeed = speed;" line109="            if (this.rainbowSpeed &gt; 5) {" line110="                this.rainbowSpeed = 5;" line111="            }" line112="            if (this.rainbowSpeed &lt; -5) {" line113="                this.rainbowSpeed = -5;" line114="            }" line115="            this.strip.rotate(this.rainbowSpeed);" line116="        }" line117="" line118="        /**" line119="         * Play next animation" line120="         */" line121="        //% blockId=&quot;christmasring_nextMode&quot; block=&quot;%ring play next mode&quot;" line122="        //% ring.defl=ring" line123="        //% weight=90 blockGap=8" line124="        //% parts=&quot;christmasring&quot;" line125="        public nextMode(): void {" line126="            this._isSetupRainbow = false;" line127="            this.mode += 1;" line128="            if (this.mode &gt;= 4) {" line129="                this.mode = 0;" line130="            }" line131="        }" line132="" line133="        /**" line134="         * Play previous animation" line135="         */" line136="        //% blockId=&quot;christmasring_previousMode&quot; block=&quot;%ring play previous mode&quot;" line137="        //% ring.defl=ring" line138="        //% weight=90 blockGap=8" line139="        //% parts=&quot;christmasring&quot;" line140="        public previousMode(): void {" line141="            this._isSetupRainbow = false;" line142="            this.mode -= 1;" line143="            if (this.mode &lt;= 0) {" line144="                this.mode = 3;" line145="            }" line146="        }" line147="" line148="        /**" line149="         * Update animation" line150="         */" line151="        //% blockId=&quot;christmasring_update&quot; block=&quot;%ring update lighting animation&quot;" line152="        //% ring.defl=ring" line153="        //% weight=90 blockGap=8" line154="        //% parts=&quot;christmasring&quot;" line155="        public update(): void {" line156="            if (this.mode == 0) {" line157="                this.rainbowAnimation(this.rainbowSpeed);" line158="                this.showStrip();" line159="                basic.pause(100);" line160="            } else if (this.mode == 1) {" line161="                let mic = 128" line162="                try {" line163="                    mic = input.soundLevel()" line164="                } catch (err) {" line165="                    mic = 128" line166="                }" line167="                this.equalizerAnimation(mic);" line168="                this.showStrip();" line169="                basic.pause(1);" line170="            } else if (this.mode == 2) {" line171="                this.breathAnimation();" line172="                this.showStrip();" line173="            } else if (this.mode == 3) {" line174="                let mic2 = 128" line175="                try {" line176="                    mic2 = input.soundLevel()" line177="                } catch (err2) {" line178="                    mic2 = 128" line179="                }" line180="                this.riseAnimation(mic2, 100)" line181="                this.showStrip();" line182="            } else {" line183="                this.showStrip();" line184="            }" line185="            this._colorOffset += 1;" line186="            this._breathColorOffset += 1;" line187="            this._breathT += 1;" line188="" line189="            if (this._colorOffset &gt; 360) {" line190="                this._colorOffset = 0;" line191="            }" line192="            if (this._breathT &gt; 100) {" line193="                this._breathT = 1;" line194="            }" line195="        }" line196="" line197="        private applyColorPattern() {" line198="            if (!this._colorList)  {" line199="                this._colorList = [0xFF8522, 0xBAA550, 0x30ba2c];" line200="            }" line201="            if (this._colorList.length == 0) {" line202="                this._colorList = [0xFF8522," line203="                                    0xBAA550," line204="                                    0x30ba2c]" line205="            }" line206="            let colorArray = [];" line207="            for (let i = 0; i &lt; this._colorList.length; i++) {" line208="                let _r = (this._colorList[i] &gt;&gt; 16) &amp; 255;" line209="                let _g = (this._colorList[i] &gt;&gt; 8) &amp; 255;" line210="                let _b = this._colorList[i] &amp; 255;" line211="                colorArray[i] = {" line212="                    r: _r," line213="                    g: _g," line214="                    b: _b," line215="                }" line216="            }" line217="" line218="            // let colorArray = [new RGBVector3(255, 169, 0)," line219="            //     new RGBVector3(249, 209, 0)," line220="            //     new RGBVector3(116, 213, 245)," line221="            //     new RGBVector3(255, 38, 141)," line222="            //     new RGBVector3(145, 52, 137)," line223="            //     new RGBVector3(255, 169, 0)];" line224="" line225="            let arrayIndex = 0;" line226="            if (colorArray.length &lt;= 1) {" line227="                console.log('Error');                " line228="            }" line229="            for (let index = 0; index &lt; colorArray.length - 1; index++) {" line230="                let r = colorArray[index].r;" line231="                let g = colorArray[index].g;" line232="                let b = colorArray[index].b;" line233="" line234="                let rD = colorArray[index + 1].r;" line235="                let gD = colorArray[index + 1].g;" line236="                let bD = colorArray[index + 1].b;" line237="" line238="                let num_step = Math.floor(this.totalNumLeds / (colorArray.length - 1));" line239="                let small_step = 1 / num_step;" line240="" line241="                for (let jj = 1; jj &lt;= num_step; jj++) {                    " line242="                    let amount = small_step * jj;" line243="                    let r_0 = this.lerp(r, rD, amount);" line244="                    let g_0 = this.lerp(g, gD, amount);" line245="                    let b_0 = this.lerp(b, bD, amount);" line246="" line247="                    this.strip.setPixelColor(arrayIndex, neopixel.rgb(r_0, g_0, b_0));" line248="                    arrayIndex++;" line249="                }" line250="            }" line251="        }" line252="" line253="        /**" line254="         * Set color pattern list" line255="        * (0, 1, 2, 3, etc...)" line256="        */" line257="        //% blockId=&quot;christmasring_setColorPattern&quot; block=&quot;%ring|set color pattern to %colorList to &quot;" line258="        //% ring.defl=ring" line259="        //% weight=90 blockGap=8" line260="        //% parts=&quot;christmasring&quot;" line261="        public setColorPattern(colorList: number[]): void {" line262="            " line263="            this._colorList = colorList;" line264="            console.log(&quot;colorList.length = &quot; + this._colorList.length);" line265="            // for (let j =0; j &lt; colorList.length; j++){" line266="            //     this._colorList[j] = colorList[j];" line267="            // }            " line268="            this.applyColorPattern();" line269="        }" line270="" line271="        /**" line272="         * Set leds strip to rainbow pattern." line273="         */" line274="        //% blockId=&quot;christmasring_showRainbow&quot; block=&quot;%ring|set to rainbow pattern&quot;" line275="        //% ring.defl=ring" line276="        //% weight=85 blockGap=8" line277="        //% parts=&quot;christmasring&quot;" line278="        public showRainbow(): void {" line279="            this.strip.showRainbow();" line280="        }" line281="" line282="        " line283="" line284="        private lerp(x: number, y: number, a: number) {" line285="            return (1 - a) * x + a * y;" line286="        }" line287="" line288="        /**" line289="         * Play rainbow animation" line290="         */" line291="        //% blockId=&quot;christmasring_rainbowAnimation&quot; block=&quot;%ring play rainbow animation width speed%speed&quot;" line292="        //% ring.defl=ring" line293="        //% weight=90 blockGap=8" line294="        //% parts=&quot;christmasring&quot;" line295="        public rainbowAnimation(speed: number): void {" line296="            this.rainbowSpeed = speed;" line297="            if (this._isSetupRainbow == false || this._isSetupRainbow == null) {" line298="                this._isSetupRainbow = true;" line299="                this.strip.clear()" line300="                //this.strip.showRainbow(1, 360)" line301="                " line302="                this.applyColorPattern();" line303="                " line304="            }" line305="            this.rotatePixelColor(this.rainbowSpeed)" line306="        }" line307="" line308="        " line309="" line310="" line311="        /**" line312="         * Play equalizer animation" line313="         */" line314="        //% blockId=&quot;christmasring_equalizerAnimation&quot; block=&quot;%ring play equalizer animation with sound level%value&quot;" line315="        //% ring.defl=ring" line316="        //% weight=90 blockGap=8" line317="        //% parts=&quot;christmasring&quot;" line318="        public equalizerAnimation(micVal: number): void {" line319="            if (this._lastMicVal != -1) {" line320="                if (micVal &lt; this._lastMicVal) {" line321="                    micVal = micVal + ((this._lastMicVal - micVal) * 0.2)" line322="                } else {" line323="                    micVal = this._lastMicVal + ((micVal - this._lastMicVal) * 0.95)" line324="                }" line325="            }" line326="            this._lastMicVal = micVal;" line327="            let anchor: number = micVal / 100 * this.numOfLEDPerPillar" line328="" line329="            this.strip.clear()" line330="            for (let idx = 0; idx &lt;= this.numOfLEDPerPillar; idx++) {" line331="                let _color = idx * this._colorStep + this._colorOffset % 360" line332="                if (idx &lt;= anchor) {" line333="                    this.setLevelColor(idx, this.makeColor(_color, 100, 50))" line334="                } else {" line335="                    let _saturation: number = (45 - 5) * ((this.numOfLEDPerPillar - idx) / (this.numOfLEDPerPillar - anchor)) * 0.6" line336="                    let _brightness: number = (100 - 40) * ((this.numOfLEDPerPillar - idx) / (this.numOfLEDPerPillar - anchor)) * 1" line337="                    if (_saturation &lt; 5) {" line338="                        _saturation = 5" line339="                    }" line340="                    this.setLevelColor(idx, this.makeColor(_color, _saturation, _brightness))" line341="                }" line342="            }" line343="        }" line344="" line345="        /**" line346="         * Play breath animation" line347="         */" line348="        //% blockId=&quot;christmasring_breathAnimation&quot; block=&quot;%ring play breath animation&quot;" line349="        //% ring.defl=ring" line350="        //% weight=90 blockGap=8" line351="        //% parts=&quot;christmasring&quot;" line352="        public breathAnimation() {" line353="            if (this._breathT % 100 == 0) {" line354="                this._breathDir *= -1;" line355="            }" line356="            let breathB = 0;" line357="            if (this._breathDir == 1) {" line358="                breathB = this.easeInOutQuad(this._breathT % 100, 0, 100, 100)" line359="            } else {" line360="                breathB = 100 - this.easeInOutQuad(this._breathT % 100, 0, 100, 100)" line361="            }" line362="" line363="            this.strip.clear()" line364="            for (let index2 = 0; index2 &lt; this.numOfLEDPerPillar; index2++) {" line365="                let color = this.makeColor((this._breathColorOffset / 7 + (60 / this.numOfLEDPerPillar * index2)) % 360, 100, breathB * 0.45 + 5)" line366="                this.setLevelColor(index2, color)" line367="            }" line368="" line369="        }" line370="" line371="        /**" line372="         * Play rise animation" line373="         */" line374="        //% blockId=&quot;christmasring_riseAnimation&quot; block=&quot;%ring play rise animation with sound level%micVale and trigger threshold%threshold&quot;" line375="        //% ring.defl=ring" line376="        //% weight=90 blockGap=8" line377="        //% parts=&quot;christmasring&quot;" line378="        public riseAnimation(micVal: Number, threshold: Number): void {" line379="            let _duration = 3" line380="            if (micVal &gt; threshold) {" line381="                this.triggerRise(_duration)" line382="            }" line383="            this.moveRise()" line384="        }" line385="" line386="" line387="" line388="        /**" line389="         * Trigger rise led effect" line390="         */" line391="        //% blockId=&quot;christmasring_triggerRiseWithColor&quot; block=&quot;%ring trigger rise led effect with %duration|duration and %color|color&quot;" line392="        //% ring.defl=ring" line393="        //% weight=90 blockGap=8" line394="        //% parts=&quot;christmasring&quot;" line395="        public triggerRiseWithColor(duration: number, color: number): void {" line396="            this._riseDuration = duration" line397="            let _duration2 = this._riseDuration" line398="            this._riseState[0] = this._riseState[1] = _duration2" line399="            this._riseColor[0] = this._riseColor[1] = this.makeColor(color, 100, 50)" line400="        }" line401="" line402="" line403="        /**" line404="         * Trigger rise led effect" line405="         */" line406="        //% blockId=&quot;christmasring_triggerRise&quot; block=&quot;%ring trigger rise led effect with %duration|duration&quot;" line407="        //% ring.defl=ring" line408="        //% weight=90 blockGap=8" line409="        //% parts=&quot;christmasring&quot;" line410="        public triggerRise(duration: number): void {" line411="            this._riseDuration = duration" line412="            let _duration3 = this._riseDuration" line413="            this._riseState[0] = this._riseState[1] = _duration3" line414="            this._riseColor[0] = this._riseColor[1] = this.makeColor(Math.random() * 360, 100, 50)" line415="        }" line416="" line417="        /**" line418="         * Move rise led move upward" line419="         */" line420="        //% blockId=&quot;christmasring_moveRise&quot; block=&quot;%ring move rise led upward&quot;" line421="        //% ring.defl=ring" line422="        //% weight=90 blockGap=8" line423="        //% parts=&quot;christmasring&quot;" line424="        public moveRise(): void {" line425="            let _duration4 = this._riseDuration" line426="            this.strip.clear()" line427="" line428="            for (let level = 0; level &lt; this.numOfLEDPerPillar; level++) {" line429="                if (this._riseState[level] &gt; 0) {" line430="                    this.setLevelColor(level, this._riseColor[level])" line431="                    this._riseState[level] -= 1;" line432="                    if (this._riseState[level] == 0 &amp;&amp; level + 1 &lt; this.numOfLEDPerPillar) {" line433="                        this._riseState[level + 1] = _duration4 + 1;" line434="                        this._riseColor[level + 1] = this._riseColor[level]" line435="                    }" line436="                } else {" line437="                    this.setLevelColor(level, this.makeColor(30, 25, 10))" line438="                }" line439="            }" line440="        }" line441="" line442="        private makeColor(color: number, saturation: number, brightness: number): number {" line443="            return neopixel.hsl(color, saturation, brightness)" line444="        }" line445="" line446="        /**" line447="         * Set christmas ring color" line448="         */" line449="        //% blockId=&quot;christmasring_setRingColor&quot; block=&quot;%ring set christmas ring led color to %color=neopixel_colors&quot;" line450="        //% ring.defl=ring" line451="        //% weight=90 blockGap=8" line452="        //% parts=&quot;christmasring&quot;" line453="        public setRingColor(color: number): void {" line454="            for (let idx2 = 0; idx2 &lt;= 19; idx2++) {" line455="                this.setLevelColor(idx2, color)" line456="            }" line457="        }" line458="" line459="        /**" line460="         * Set christmas ring brightness" line461="         * value larger than 50 color will change to white" line462="         */" line463="        //% blockId=&quot;christmasring_setRingColorAndBrightness&quot; block=&quot;%ring set christmas ring color to %color=christmasring_pickColorHue and led brightness to %brightness&quot;" line464="        //% ring.defl=ring" line465="        //% weight=90 blockGap=8" line466="        //% parts=&quot;christmasring&quot;" line467="        public setRingColorAndBrightness(color: number, brightness: number): void {" line468="            for (let idx3 = 0; idx3 &lt;= 19; idx3++) {" line469="                this.setLevelColor(idx3, neopixel.hsl(color, 100, brightness))" line470="            }" line471="        }" line472="" line473="" line474="" line475="        /**" line476="         * Set christmas ring brightness" line477="         * Set specfic level to different color and brightness" line478="         * (0 = level-1, 1 = level-2, etc...)" line479="         */" line480="        //% blockId=&quot;christmasring_setLevelColorAndBrightness&quot; block=&quot;%ring set level-%level=christmasring_levels color to %color=christmasring_pickColorHue and led brightness to %brightness&quot;" line481="        //% ring.defl=ring" line482="        //% weight=90 blockGap=8" line483="        //% parts=&quot;christmasring&quot;" line484="        public setLevelColorAndBrightness(level: number, color: number, brightness: number): void {" line485="            this.setLevelColor(level, neopixel.hsl(color, 100, brightness))" line486="        }" line487="" line488="        /**" line489="         * Set specfic level to different color " line490="         * (0 = level-1, 1 = level-2, etc...)" line491="         */" line492="        //% blockId=&quot;christmasring_setLevelColor&quot; block=&quot;%ring set level-%level=christmasring_levels led to %color=neopixel_colors&quot;" line493="        //% ring.defl=ring" line494="        //% weight=90 blockGap=8" line495="        //% parts=&quot;christmasring&quot;" line496="        public setLevelColor(level: number, color: number): void {" line497="            this.strip.setPixelColor(level, color)" line498="            //this.strip.setPixelColor(39 - level, color)" line499="            //this.strip.setPixelColor(level + 41, color)" line500="            //this.strip.setPixelColor(81 - level, color)" line501="" line502="            //if(level==this.numOfLEDPerPillar-1){" line503="            //    this.strip.setPixelColor(19, color)" line504="            //    this.strip.setPixelColor(20, color)" line505="            //    this.strip.setPixelColor(60, color)" line506="            //    this.strip.setPixelColor(61, color)" line507="            //    this.strip.setPixelColor(62, color)" line508="            //}" line509="        }" line510="" line511="        /**" line512="         * Set pixel color " line513="         * (0 = index-1, 1 = index-2, etc...)" line514="         */" line515="        //% blockId=&quot;christmasring_setPixelColor&quot; block=&quot;%ring set pixel-%index led to %color=neopixel_colors&quot;" line516="        //% ring.defl=ring" line517="        //% weight=90 blockGap=8" line518="        //% parts=&quot;christmasring&quot;" line519="        public setPixelColor(index: number, color: number): void {" line520="            this.strip.setPixelColor(index, color)" line521="        }" line522="" line523="        public easeInOutQuad(_percent: number, _elapsed: number, _start: number, _end: number) {" line524="            _percent /= _end / 2;" line525="" line526="            if (_percent &lt; 1) {" line527="                return _start / 2 * _percent * _percent + _elapsed" line528="            }" line529="            _percent += -1" line530="            return (0 - _start) / 2 * (_percent * (_percent - 2) - 1) + _elapsed" line531="        }" line532="    }" line533="    /**" line534="      * Create a new Christmas Ring controller." line535="      * @param mode the default mode where the Christmas ring default setting." line536="      */" line537="    //% blockId=&quot;christmasring_create&quot; block=&quot;Create christmas ring&quot;" line538="    //% weight=90 blockGap=8" line539="    //% parts=&quot;christmasring&quot;" line540="    //% trackArgs=0,1" line541="    //% blockSetVariable=ring" line542="    export function create(): ChristmasWreath {" line543="        let ring = new ChristmasWreath();" line544="        ring.mode = LEDMode.Rainbow;" line545="        ring.numOfLEDPerPillar = 15;" line546="        ring.totalNumLeds = 30;" line547="        ring.strip = neopixel.create(DigitalPin.P2, ring.totalNumLeds, NeoPixelMode.RGB);" line548="        ring.rainbowSpeed = 1;" line549="" line550="        ring.updateVars();" line551="        return ring;" line552="    }" line553="" line554="    /**" line555="     * Gets the level value of a known levels" line556="    */" line557="    //% weight=2 blockGap=8" line558="    //% blockId=&quot;christmasring_levels&quot; block=&quot;%level&quot;" line559="    //% advanced=true" line560="    export function levels(_level: Level): number {" line561="        return _level;" line562="    }" line563="" line564="" line565="    /**" line566="     * Gets hue color" line567="    */" line568="    //% weight=2 blockGap=8" line569="    //% blockId=&quot;christmasring_pickColors&quot; block=&quot;HueColor $color&quot;" line570="    //% color.shadow=&quot;colorWheelHsvPicker&quot;" line571="    //% advanced=true" line572="    export function hueColor(color: number): number {" line573="        return neopixel.hsl(color / 255 * 360, 100, 50);" line574="    }" line575="" line576="    //% block=&quot;show wheel $color&quot;" line577="    //% color.shadow=&quot;colorWheelPicker&quot;" line578="    //% advanced=true" line579="    export function showColorWheel(color: number): number {" line580="    " line581="        let colorWheel = [" line582="            { r: 0, g: 255, b: 255 }," line583="            { r: 60, g: 195, b: 255 }," line584="            { r: 120, g: 135, b: 255 }," line585="            { r: 180, g: 75, b: 255 }," line586="            { r: 240, g: 15, b: 255 }," line587="            { r: 255, g: 45, b: 210 }," line588="            { r: 255, g: 105, b: 150 }," line589="            { r: 255, g: 165, b: 90 }," line590="            { r: 255, g: 225, b: 30 }," line591="            { r: 225, g: 255, b: 30 }," line592="            { r: 165, g: 255, b: 90 }," line593="            { r: 105, g: 255, b: 150 }," line594="            { r: 45, g: 255, b: 210 }" line595="        ];" line596="" line597="        let lerp = function (start: number, end: number, amt: number): number {" line598="            return (1 - amt) * start + amt * end" line599="        }" line600="        color = color &gt;&gt; 0;" line601="        color = (color &gt; 255) ? 255 : color;" line602="        let _percent = color / 256;" line603="        let b_index = Math.floor(_percent * colorWheel.length);" line604="        let e_index = b_index + 1;" line605="        e_index = (e_index &gt; colorWheel.length - 1) ? colorWheel.length - 1 : e_index" line606="" line607="        let start = { r: colorWheel[b_index].r, g: colorWheel[b_index].g, b: colorWheel[b_index].b }" line608="        let end = { r: colorWheel[e_index].r, g: colorWheel[e_index].g, b: colorWheel[e_index].b }" line609="        let u = _percent * colorWheel.length - 1." line610="        u = u - Math.floor(u);" line611="" line612="        let s = Math.round(lerp(start.r, end.r, u));" line613="        let h = Math.round(lerp(start.g, end.g, u));" line614="        let c = Math.round(lerp(start.b, end.b, u));" line615="        let colorname = 'rgb(' + s + ',' + h + ',' + c + ')';" line616="        console.log(colorname);" line617="" line618="        let fullColorHex = function (r: number, g: number, b: number): number {                " line619="            return ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b);" line620="        }" line621="        let colorInDecimal = fullColorHex(s,h,c);" line622="        " line623="        // let hexToRgb = function (hex: number):string {" line624="        //     console.log(&quot;hex&quot; + hex);" line625="        //     let RR = '' + (hex &gt;&gt; 16).toString();" line626="        //     let GG = ''; //(hex &gt;&gt; 8).toString();" line627="        //     let BB = ''; //(hex &gt;&gt; 0).toString();" line628="        //     return &quot;&quot; + RR + GG + BB;" line629="        // }" line630="        //console.log(&quot;rgb = &quot; + r + &quot;, &quot; +g  + &quot;,&quot; + b);   " line631="        return colorInDecimal;" line632="    }" line633="" line634="}" numlines="635"></mutation><next><block type="device_show_leds" id="E?pG^a8lD$~@Fm-,2bG."><field name="LEDS">`
        # # # # # 
        . . . . . 
        . . . . . 
        . . . . . 
        . . . . .
        `</field><next><block type="variables_set" id="i;G0mUVgOQ$]HamT1K`O"><field name="VAR" id="44mPi^agBwp}Bja[zzZ8">colorList</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_create_with" id="Z@[m7yhF{)i,.;/8ofIb" inline="false"><mutation items="4" horizontalafter="3"/><value name="ADD0"><block type="ChristmasWreath_showColorWheel" id="q`qd=|(JL_^s)vYgCXa2"><value name="color"><shadow type="colorWheelPicker" id="^s%GW(#fE~:aprrEafCJ"><field name="value">0</field></shadow></value></block></value><value name="ADD1"><block type="ChristmasWreath_showColorWheel" id=".Hq~J,kci*K{60yw8o}h"><value name="color"><shadow type="colorWheelPicker" id="(zViuZ|cHrLl(/fZHW+O"><field name="value">9</field></shadow></value></block></value><value name="ADD2"><block type="ChristmasWreath_showColorWheel" id="WPcx]cbiuJo28NhD1C~+"><value name="color"><shadow type="colorWheelPicker" id="6F0m4f7e~mWOa;Oai8^D"><field name="value">43</field></shadow></value></block></value><value name="ADD3"><block type="christmasring_pickColors" id="j+mFKpgD|bE#HDClKxu1"><value name="color"><shadow type="colorWheelHsvPicker" id="Y6/b^e_}?No,O[UzG8Hf"><field name="value">0</field></shadow></value></block></value></block></value><next><block type="variables_set" id="xN~/-g{CCJ453ZMtJk0{"><field name="VAR" id="#f}v),qFh5WQLUbqM^8G">ring2</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="christmasring_create" id="6jBm`(o70v3P66|?_OC2"/></value><next><block type="christmasring_changeMode" id="CW|N#]gy|4Ls}9J?0G%^"><field name="mode">LEDMode.Rainbow</field><value name="ring"><block type="variables_get" id="Ak;]:QB)dgF@}u|DP/Qh"><field name="VAR" id="#f}v),qFh5WQLUbqM^8G">ring2</field></block></value><next><block type="christmasring_showStrip" id=",8gW%$@8dg.|VTK%q1@z"><value name="ring"><block type="variables_get" id="$Q6A+qB?d8AC7lQn!s#o"><field name="VAR" id="#f}v),qFh5WQLUbqM^8G">ring2</field></block></value><next><block type="variables_set" id="tPtf|cg1ct1vWfqv2q=_"><field name="VAR" id="QN%o*7*9*|CWulQ?~6m~">speed</field><value name="VALUE"><shadow type="math_number" id="@OpcCDM2.b_6J(1k)7e6"><field name="NUM">0</field></shadow></value><next><block type="christmasring_setColorPattern" id="0%Zd(:Sv47RY![A52RL["><value name="ring"><block type="variables_get" id="S?bM[?M6zp:A$fxs.lHP"><field name="VAR" id="#f}v),qFh5WQLUbqM^8G">ring2</field></block></value><value name="colorList"><block type="variables_get" id="mp$IK*v4/}R)%$w$Q{ra"><field name="VAR" id="44mPi^agBwp}Bja[zzZ8">colorList</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_button_event" id="``=BHm1Zlz+7dalY|853" x="1829" y="20"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="variables_set" id="kKZBAT.*nBF4$y0T4LTG"><field name="VAR" id="QN%o*7*9*|CWulQ?~6m~">speed</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id="y?ictqU9{~Uh5lt/B.1X"><field name="OP">ADD</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="htU0RM^Y|8_JW_u)j-du"><field name="VAR" id="QN%o*7*9*|CWulQ?~6m~">speed</field></block></value><value name="B"><shadow type="math_number" id="xfdxX]8y}nBl3I~Os^qS"><field name="NUM">1</field></shadow></value></block></value><next><block type="christmasring_showStrip" id="66F%v9z25pZ#~]pv=2qp"><comment pinned="false" h="80" w="160" relx="10" rely="10">ring2.setRingColor(ChristmasWreath.showColorWheel(255))
ring2.showColor(neopixel.hsl(0, 0, 0))</comment><value name="ring"><block type="variables_get" id="o;2U=/V.ZAk*#_qFy_B3"><field name="VAR" id="#f}v),qFh5WQLUbqM^8G">ring2</field></block></value></block></next></block></statement></block><block type="device_button_event" id="]Q/D5wEkE8rDh!#?3:z`" x="2535" y="20"><field name="NAME">Button.B</field><statement name="HANDLER"><block type="variables_set" id=")9S0g=,Y,m*bKD4h1Qk8"><field name="VAR" id="QN%o*7*9*|CWulQ?~6m~">speed</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id="vcYs3vi/Wd7__j%h{uJ`"><field name="OP">MINUS</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="7{#4Hj[3Jl;;^K:`(fMf"><field name="VAR" id="QN%o*7*9*|CWulQ?~6m~">speed</field></block></value><value name="B"><shadow type="math_number" id="NH92]2|4HtYcA[7H(m+4"><field name="NUM">1</field></shadow></value></block></value><next><block type="christmasring_showStrip" id="?bCca!RKesl0#[!gbJ)_"><comment pinned="false" h="80" w="160" relx="10" rely="10">ring2.setRingColor(ChristmasWreath.showColorWheel(45))
ring2.showColor(neopixel.hsl(0, 0, 0))</comment><value name="ring"><block type="variables_get" id="f3X*@p5ppk_nmAxaQm-@"><field name="VAR" id="#f}v),qFh5WQLUbqM^8G">ring2</field></block></value></block></next></block></statement></block><block type="device_forever" id="mZa9T[eJ}1{d+tUdWQ*7" x="3233" y="20"><statement name="HANDLER"><block type="christmasring_rainbowAnimation" id="t4MqmtGGUfG!e=LlEHH:"><value name="ring"><block type="variables_get" id="xb_|c8J+:sS:R]^H5*vz"><field name="VAR" id="#f}v),qFh5WQLUbqM^8G">ring2</field></block></value><value name="speed"><block type="variables_get" id="1I?/YHH$MLm$UfYzU=q%"><field name="VAR" id="QN%o*7*9*|CWulQ?~6m~">speed</field></block></value><next><block type="christmasring_showStrip" id="p.[`HeiQQlyA[/rz(utI"><comment pinned="false" h="80" w="160" relx="10" rely="10">ring2.setRingColor(ChristmasWreath.showColorWheel(45))
ring2.showColor(neopixel.hsl(0, 0, 0))</comment><value name="ring"><block type="variables_get" id="0M49pGSzIO46I{B`L5Hj"><field name="VAR" id="#f}v),qFh5WQLUbqM^8G">ring2</field></block></value></block></next></block></statement></block><block type="ChristmasWreath_showColorWheel" id="%2~NX7g7Wt.a[eQuM,L%" disabled="true" x="538" y="27692"><value name="color"><shadow type="colorWheelPicker" id="$78(Cy4-V*Db(@=LKL4i" disabled="true"><field name="value">180</field></shadow></value></block><block type="ChristmasWreath_showColorWheel" id="wQ!-f`3ZQBAG;%`%UAfY" disabled="true" x="555" y="27767"><value name="color"><shadow type="colorWheelPicker" id="CeBa%1-oAyqNg:I|m?4q" disabled="true"><field name="value">169</field></shadow></value></block><block type="ChristmasWreath_showColorWheel" id="#HN?$UrKYS=o/MD(-%hA" disabled="true" x="587" y="27822"><value name="color"><shadow type="colorWheelPicker" id=".M-Iq+C93-W2vX:1uD}7" disabled="true"><field name="value">230</field></shadow></value></block><block type="ChristmasWreath_showColorWheel" id="]VjTU;*(?#SoPy3uWAOo" disabled="true" x="562" y="27863"><value name="color"><shadow type="colorWheelPicker" id=",ZP^#@q,1B0cdOP7/nP-" disabled="true"><field name="value">0</field></shadow></value></block><block type="christmasring_pickColors" id=",5Rg*=^l4=hK_mpRRfYH" disabled="true" x="883" y="27926"><value name="color"><shadow type="colorWheelHsvPicker" id="s1igv%w-t798k7-Bc~4S" disabled="true"><field name="value">249</field></shadow></value></block><block type="ChristmasWreath_showColorWheel" id="R9qKteLcuKARb2A/va|." disabled="true" x="543" y="27955"><value name="color"><shadow type="colorWheelPicker" id="oQ8FDWVZpHhJ,%wyEq[Q" disabled="true"><field name="value">10</field></shadow></value></block></xml>