<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id=";*y]Pw{jSPFJ^P|2mWb%">speed</variable><variable id="^;Reqi,L`#T!uB;G-!p~">ring2</variable><variable id="bj{]oKepUuR-eYJXs[dp">colorList</variable></variables><block type="pxt-on-start" id=".rhGe)%B4X`=C$M-1|^r" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="NCQem_(s{WO;pRtx_`zI" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let speed = 0" numlines="1" declaredvars="speed"></mutation><next><block type="typescript_statement" id="axoSHI+;il{)}xVL1Ut^" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum LEDMode {" line1="    //% block=&quot;Rainbow2 Mode&quot;" line2="    Rainbow = 0," line3="    //% block=&quot;Equalizer Mode&quot;" line4="    Equalizer = 1," line5="    //% block=&quot;Breath Mode&quot;" line6="    Breath = 2," line7="    //% block=&quot;Directional Mode&quot;" line8="    Rise = 3," line9="    //% block=&quot;Free Mode&quot;" line10="    Free = 4" line11="}" numlines="12"></mutation><next><block type="typescript_statement" id="C7L`!{nBs8a-){HTmoEL" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Level {" line1="    //% block=&quot;Level 1&quot;" line2="    Level_1 = 0," line3="    //% block=&quot;Level 2&quot;" line4="    Level_2 = 1," line5="    //% block=&quot;Level 3&quot;" line6="    Level_3 = 2," line7="    //% block=&quot;Level 4&quot;" line8="    Level_4 = 3," line9="    //% block=&quot;Level 5&quot;" line10="    Level_5 = 4," line11="    //% block=&quot;Level 6&quot;" line12="    Level_6 = 5," line13="    //% block=&quot;Level 7&quot;" line14="    Level_7 = 6," line15="    //% block=&quot;Level 6&quot;" line16="    Level_8 = 7," line17="    //% block=&quot;Level 9&quot;" line18="    Level_9 = 8," line19="    //% block=&quot;Level 10&quot;" line20="    Level_10 = 9," line21="    //% block=&quot;Level 11&quot;" line22="    Level_11 = 10," line23="    //% block=&quot;Level 12&quot;" line24="    Level_12 = 11," line25="    //% block=&quot;Level 13&quot;" line26="    Level_13 = 12," line27="    //% block=&quot;Level 14&quot;" line28="    Level_14 = 13," line29="    //% block=&quot;Level 15&quot;" line30="    Level_15 = 14" line31="}" numlines="32"></mutation><next><block type="typescript_statement" id="^bAAw?|{sX9Vnma_6CzO" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ChristmasWreath {" line1="    /**" line2="     * A ChristmasWreath ring" line3="     */" line4="" line5="    class RGBVector3 {" line6="        public r: number;" line7="        public g: number;" line8="        public b: number;" line9="" line10="        constructor(r: number, g: number, b: number) {" line11="            this.r = r;" line12="            this.g = g;" line13="            this.b = b;" line14="        }" line15="    }" line16="" line17="    export class ChristmasWreath {" line18="        mode: LEDMode;" line19="        strip: neopixel.Strip;" line20="        //numOfLEDs: number;" line21="        totalNumLeds: number;" line22="        numOfLEDPerPillar: number;" line23="" line24="        private _colorStep: number;" line25="" line26="        private _lastMicVal: number;" line27="        private _colorOffset: number;" line28="" line29="        rainbowSpeed: number;" line30="        private _isSetupRainbow: boolean;" line31="" line32="" line33="        private _breathT: number;" line34="        private _breathDir: number;" line35="        private _breathColorOffset: number;" line36="" line37="        private _riseDuration: number;" line38="        private _riseState: number[];" line39="        private _riseColor: number[];" line40="" line41="        private _colorList: number[];" line42="" line43="" line44="        public updateVars(): void {" line45="            this._colorStep = 360 / this.numOfLEDPerPillar;" line46="            this._colorOffset = 0;" line47="            this._lastMicVal = -1;" line48="            this._breathT = 0;" line49="            this._breathDir = 1;" line50="            this._breathColorOffset = 0;" line51="" line52="            this._riseState = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]" line53="            this._riseColor = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]" line54="            this._riseDuration = 3;" line55="" line56="        }" line57="" line58="" line59=" " line60="" line61="" line62="        /**" line63="         * Clear strip led color" line64="         */" line65="        //% blockId=&quot;christmasring_clearStrip&quot; block=&quot;%ring clear led color&quot;" line66="        //% ring.defl=ring" line67="        //% weight=90 blockGap=8" line68="        //% parts=&quot;christmasring&quot;" line69="        public clearStrip(): void {" line70="            this.strip.clear();" line71="        }" line72="" line73="        /**" line74="         * Show strip led color" line75="         */" line76="        //% blockId=&quot;christmasring_showStrip&quot; block=&quot;%ring show led color&quot;" line77="        //% ring.defl=ring" line78="        //% weight=90 blockGap=8" line79="        //% parts=&quot;christmasring&quot;" line80="        public showStrip(): void {" line81="            this.strip.show();" line82="        }" line83="" line84="        /**" line85="         * Shows a rainbow pattern on all LEDs." line86="         * @param startHue the start hue value for the rainbow, eg: 1" line87="         * @param endHue the end hue value for the rainbow, eg: 360" line88="         */" line89="        //% blockId=&quot;christmasring_changeMode&quot; block=&quot;%ring|change mode to %mode&quot;" line90="        //% ring.defl=ring" line91="        //% weight=85 blockGap=8" line92="        //% parts=&quot;christmasring&quot;" line93="        public changeMode(m: LEDMode): void {" line94="            this._isSetupRainbow = false;" line95="            this.mode = m;" line96="        }" line97="" line98="        /**" line99="         * Shows a rainbow pattern on all LEDs." line100="         * @param startHue the start hue value for the rainbow, eg: 1" line101="         * @param endHue the end hue value for the rainbow, eg: 360" line102="         */" line103="        //% blockId=&quot;christmasring_rotatePixelColor&quot; block=&quot;%ring|move pixel by %mode|pixel&quot;" line104="        //% ring.defl=ring" line105="        //% weight=85 blockGap=8" line106="        //% parts=&quot;christmasring&quot;" line107="        public rotatePixelColor(speed: number): void {" line108="            this.rainbowSpeed = speed;" line109="            if (this.rainbowSpeed &gt; 5) {" line110="                this.rainbowSpeed = 5;" line111="            }" line112="            if (this.rainbowSpeed &lt; -5) {" line113="                this.rainbowSpeed = -5;" line114="            }" line115="            this.strip.rotate(this.rainbowSpeed);" line116="        }" line117="" line118="        /**" line119="         * Play next animation" line120="         */" line121="        //% blockId=&quot;christmasring_nextMode&quot; block=&quot;%ring play next mode&quot;" line122="        //% ring.defl=ring" line123="        //% weight=90 blockGap=8" line124="        //% parts=&quot;christmasring&quot;" line125="        public nextMode(): void {" line126="            this._isSetupRainbow = false;" line127="            this.mode += 1;" line128="            if (this.mode &gt;= 4) {" line129="                this.mode = 0;" line130="            }" line131="        }" line132="" line133="        /**" line134="         * Play previous animation" line135="         */" line136="        //% blockId=&quot;christmasring_previousMode&quot; block=&quot;%ring play previous mode&quot;" line137="        //% ring.defl=ring" line138="        //% weight=90 blockGap=8" line139="        //% parts=&quot;christmasring&quot;" line140="        public previousMode(): void {" line141="            this._isSetupRainbow = false;" line142="            this.mode -= 1;" line143="            if (this.mode &lt;= 0) {" line144="                this.mode = 3;" line145="            }" line146="        }" line147="" line148="        /**" line149="         * Update animation" line150="         */" line151="        //% blockId=&quot;christmasring_update&quot; block=&quot;%ring update lighting animation&quot;" line152="        //% ring.defl=ring" line153="        //% weight=90 blockGap=8" line154="        //% parts=&quot;christmasring&quot;" line155="        public update(): void {" line156="            if (this.mode == 0) {" line157="                this.rainbowAnimation(this.rainbowSpeed);" line158="                this.showStrip();" line159="                basic.pause(100);" line160="            } else if (this.mode == 1) {" line161="                let mic = 128" line162="                try {" line163="                    mic = input.soundLevel()" line164="                } catch (err) {" line165="                    mic = 128" line166="                }" line167="                this.equalizerAnimation(mic);" line168="                this.showStrip();" line169="                basic.pause(1);" line170="            } else if (this.mode == 2) {" line171="                this.breathAnimation();" line172="                this.showStrip();" line173="            } else if (this.mode == 3) {" line174="                let mic2 = 128" line175="                try {" line176="                    mic2 = input.soundLevel()" line177="                } catch (err2) {" line178="                    mic2 = 128" line179="                }" line180="                this.riseAnimation(mic2, 100)" line181="                this.showStrip();" line182="            } else {" line183="                this.showStrip();" line184="            }" line185="            this._colorOffset += 1;" line186="            this._breathColorOffset += 1;" line187="            this._breathT += 1;" line188="" line189="            if (this._colorOffset &gt; 360) {" line190="                this._colorOffset = 0;" line191="            }" line192="            if (this._breathT &gt; 100) {" line193="                this._breathT = 1;" line194="            }" line195="        }" line196="" line197="        private applyColorPattern() {" line198="            if (this._colorList.length &lt;= 2) {" line199="                this._colorList = [0," line200="                                   0]" line201="            }" line202="            let colorArray = [];" line203="            for (let i = 0; i &lt; this._colorList.length; i++) {" line204="                let _r = (this._colorList[i] &gt;&gt; 16) &amp; 255;" line205="                let _g = (this._colorList[i] &gt;&gt; 8) &amp; 255;" line206="                let _b = this._colorList[i] &amp; 255;" line207="                colorArray[i] = {" line208="                    r: _r," line209="                    g: _g," line210="                    b: _b," line211="                }" line212="            }" line213="" line214="            // let colorArray = [new RGBVector3(255, 169, 0)," line215="            //     new RGBVector3(249, 209, 0)," line216="            //     new RGBVector3(116, 213, 245)," line217="            //     new RGBVector3(255, 38, 141)," line218="            //     new RGBVector3(145, 52, 137)," line219="            //     new RGBVector3(255, 169, 0)];" line220="" line221="            let arrayIndex = 0;" line222="            for (let index = 0; index &lt; colorArray.length - 1; index++) {" line223="                let r = colorArray[index].r;" line224="                let g = colorArray[index].g;" line225="                let b = colorArray[index].b;" line226="" line227="                let rD = colorArray[index + 1].r;" line228="                let gD = colorArray[index + 1].g;" line229="                let bD = colorArray[index + 1].b;" line230="" line231="" line232="                let num_step = Math.floor(this.totalNumLeds / (colorArray.length - 1));" line233="" line234="                let small_step = 1 / num_step;" line235="                for (let jj = 1; jj &lt;= num_step; jj++) {" line236="                    arrayIndex++;" line237="                    let amount = small_step * jj;" line238="                    let r_0 = this.lerp(r, rD, amount);" line239="                    let g_0 = this.lerp(g, gD, amount);" line240="                    let b_0 = this.lerp(b, bD, amount);" line241="                    //let tmpHtml = '(' + r_0 + ', ' + g_0 + ', ' + b_0 + ')';" line242="                    this.strip.setPixelColor(arrayIndex, neopixel.rgb(r_0, g_0, b_0));" line243="                }" line244="            }" line245="        }" line246="" line247="        /**" line248="         * Set color pattern list" line249="        * (0, 1, 2, 3, etc...)" line250="        */" line251="        //% blockId=&quot;christmasring_setColorPattern&quot; block=&quot;%ring|set color pattern to %colorList to &quot;" line252="        //% ring.defl=ring" line253="        //% weight=90 blockGap=8" line254="        //% parts=&quot;christmasring&quot;" line255="        public setColorPattern(colorList: number[]): void {" line256="            this._colorList = [];" line257="            for (let j =0; j &lt; colorList.length; j++){" line258="                this._colorList[j] = colorList[j];" line259="            }            " line260="            this.applyColorPattern();" line261="        }" line262="" line263="        /**" line264="         * Set leds strip to rainbow pattern." line265="         */" line266="        //% blockId=&quot;christmasring_showRainbow&quot; block=&quot;%ring|set to rainbow pattern&quot;" line267="        //% ring.defl=ring" line268="        //% weight=85 blockGap=8" line269="        //% parts=&quot;christmasring&quot;" line270="        public showRainbow(): void {" line271="            this.strip.showRainbow();" line272="        }" line273="" line274="        " line275="" line276="        private lerp(x: number, y: number, a: number) {" line277="            return (1 - a) * x + a * y;" line278="        }" line279="" line280="        /**" line281="         * Play rainbow animation" line282="         */" line283="        //% blockId=&quot;christmasring_rainbowAnimation&quot; block=&quot;%ring play rainbow animation width speed%speed&quot;" line284="        //% ring.defl=ring" line285="        //% weight=90 blockGap=8" line286="        //% parts=&quot;christmasring&quot;" line287="        public rainbowAnimation(speed: number): void {" line288="            this.rainbowSpeed = speed;" line289="            if (this._isSetupRainbow == false || this._isSetupRainbow == null) {" line290="                this._isSetupRainbow = true;" line291="                this.strip.clear()" line292="                //this.strip.showRainbow(1, 360)" line293="                " line294="                this.applyColorPattern();" line295="                " line296="            }" line297="            this.rotatePixelColor(this.rainbowSpeed)" line298="        }" line299="" line300="        " line301="" line302="" line303="        /**" line304="         * Play equalizer animation" line305="         */" line306="        //% blockId=&quot;christmasring_equalizerAnimation&quot; block=&quot;%ring play equalizer animation with sound level%value&quot;" line307="        //% ring.defl=ring" line308="        //% weight=90 blockGap=8" line309="        //% parts=&quot;christmasring&quot;" line310="        public equalizerAnimation(micVal: number): void {" line311="            if (this._lastMicVal != -1) {" line312="                if (micVal &lt; this._lastMicVal) {" line313="                    micVal = micVal + ((this._lastMicVal - micVal) * 0.2)" line314="                } else {" line315="                    micVal = this._lastMicVal + ((micVal - this._lastMicVal) * 0.95)" line316="                }" line317="            }" line318="            this._lastMicVal = micVal;" line319="            let anchor: number = micVal / 100 * this.numOfLEDPerPillar" line320="" line321="            this.strip.clear()" line322="            for (let idx = 0; idx &lt;= this.numOfLEDPerPillar; idx++) {" line323="                let _color = idx * this._colorStep + this._colorOffset % 360" line324="                if (idx &lt;= anchor) {" line325="                    this.setLevelColor(idx, this.makeColor(_color, 100, 50))" line326="                } else {" line327="                    let _saturation: number = (45 - 5) * ((this.numOfLEDPerPillar - idx) / (this.numOfLEDPerPillar - anchor)) * 0.6" line328="                    let _brightness: number = (100 - 40) * ((this.numOfLEDPerPillar - idx) / (this.numOfLEDPerPillar - anchor)) * 1" line329="                    if (_saturation &lt; 5) {" line330="                        _saturation = 5" line331="                    }" line332="                    this.setLevelColor(idx, this.makeColor(_color, _saturation, _brightness))" line333="                }" line334="            }" line335="        }" line336="" line337="        /**" line338="         * Play breath animation" line339="         */" line340="        //% blockId=&quot;christmasring_breathAnimation&quot; block=&quot;%ring play breath animation&quot;" line341="        //% ring.defl=ring" line342="        //% weight=90 blockGap=8" line343="        //% parts=&quot;christmasring&quot;" line344="        public breathAnimation() {" line345="            if (this._breathT % 100 == 0) {" line346="                this._breathDir *= -1;" line347="            }" line348="            let breathB = 0;" line349="            if (this._breathDir == 1) {" line350="                breathB = this.easeInOutQuad(this._breathT % 100, 0, 100, 100)" line351="            } else {" line352="                breathB = 100 - this.easeInOutQuad(this._breathT % 100, 0, 100, 100)" line353="            }" line354="" line355="            this.strip.clear()" line356="            for (let index2 = 0; index2 &lt; this.numOfLEDPerPillar; index2++) {" line357="                let color = this.makeColor((this._breathColorOffset / 7 + (60 / this.numOfLEDPerPillar * index2)) % 360, 100, breathB * 0.45 + 5)" line358="                this.setLevelColor(index2, color)" line359="            }" line360="" line361="        }" line362="" line363="        /**" line364="         * Play rise animation" line365="         */" line366="        //% blockId=&quot;christmasring_riseAnimation&quot; block=&quot;%ring play rise animation with sound level%micVale and trigger threshold%threshold&quot;" line367="        //% ring.defl=ring" line368="        //% weight=90 blockGap=8" line369="        //% parts=&quot;christmasring&quot;" line370="        public riseAnimation(micVal: Number, threshold: Number): void {" line371="            let _duration = 3" line372="            if (micVal &gt; threshold) {" line373="                this.triggerRise(_duration)" line374="            }" line375="            this.moveRise()" line376="        }" line377="" line378="" line379="" line380="        /**" line381="         * Trigger rise led effect" line382="         */" line383="        //% blockId=&quot;christmasring_triggerRiseWithColor&quot; block=&quot;%ring trigger rise led effect with %duration|duration and %color|color&quot;" line384="        //% ring.defl=ring" line385="        //% weight=90 blockGap=8" line386="        //% parts=&quot;christmasring&quot;" line387="        public triggerRiseWithColor(duration: number, color: number): void {" line388="            this._riseDuration = duration" line389="            let _duration2 = this._riseDuration" line390="            this._riseState[0] = this._riseState[1] = _duration2" line391="            this._riseColor[0] = this._riseColor[1] = this.makeColor(color, 100, 50)" line392="        }" line393="" line394="" line395="        /**" line396="         * Trigger rise led effect" line397="         */" line398="        //% blockId=&quot;christmasring_triggerRise&quot; block=&quot;%ring trigger rise led effect with %duration|duration&quot;" line399="        //% ring.defl=ring" line400="        //% weight=90 blockGap=8" line401="        //% parts=&quot;christmasring&quot;" line402="        public triggerRise(duration: number): void {" line403="            this._riseDuration = duration" line404="            let _duration3 = this._riseDuration" line405="            this._riseState[0] = this._riseState[1] = _duration3" line406="            this._riseColor[0] = this._riseColor[1] = this.makeColor(Math.random() * 360, 100, 50)" line407="        }" line408="" line409="        /**" line410="         * Move rise led move upward" line411="         */" line412="        //% blockId=&quot;christmasring_moveRise&quot; block=&quot;%ring move rise led upward&quot;" line413="        //% ring.defl=ring" line414="        //% weight=90 blockGap=8" line415="        //% parts=&quot;christmasring&quot;" line416="        public moveRise(): void {" line417="            let _duration4 = this._riseDuration" line418="            this.strip.clear()" line419="" line420="            for (let level = 0; level &lt; this.numOfLEDPerPillar; level++) {" line421="                if (this._riseState[level] &gt; 0) {" line422="                    this.setLevelColor(level, this._riseColor[level])" line423="                    this._riseState[level] -= 1;" line424="                    if (this._riseState[level] == 0 &amp;&amp; level + 1 &lt; this.numOfLEDPerPillar) {" line425="                        this._riseState[level + 1] = _duration4 + 1;" line426="                        this._riseColor[level + 1] = this._riseColor[level]" line427="                    }" line428="                } else {" line429="                    this.setLevelColor(level, this.makeColor(30, 25, 10))" line430="                }" line431="            }" line432="        }" line433="" line434="        private makeColor(color: number, saturation: number, brightness: number): number {" line435="            return neopixel.hsl(color, saturation, brightness)" line436="        }" line437="" line438="        /**" line439="         * Set christmas ring color" line440="         */" line441="        //% blockId=&quot;christmasring_setRingColor&quot; block=&quot;%ring set christmas ring led color to %color=neopixel_colors&quot;" line442="        //% ring.defl=ring" line443="        //% weight=90 blockGap=8" line444="        //% parts=&quot;christmasring&quot;" line445="        public setRingColor(color: number): void {" line446="            for (let idx2 = 0; idx2 &lt;= 19; idx2++) {" line447="                this.setLevelColor(idx2, color)" line448="            }" line449="        }" line450="" line451="        /**" line452="         * Set christmas ring brightness" line453="         * value larger than 50 color will change to white" line454="         */" line455="        //% blockId=&quot;christmasring_setRingColorAndBrightness&quot; block=&quot;%ring set christmas ring color to %color=christmasring_pickColorHue and led brightness to %brightness&quot;" line456="        //% ring.defl=ring" line457="        //% weight=90 blockGap=8" line458="        //% parts=&quot;christmasring&quot;" line459="        public setRingColorAndBrightness(color: number, brightness: number): void {" line460="            for (let idx3 = 0; idx3 &lt;= 19; idx3++) {" line461="                this.setLevelColor(idx3, neopixel.hsl(color, 100, brightness))" line462="            }" line463="        }" line464="" line465="" line466="" line467="        /**" line468="         * Set christmas ring brightness" line469="         * Set specfic level to different color and brightness" line470="         * (0 = level-1, 1 = level-2, etc...)" line471="         */" line472="        //% blockId=&quot;christmasring_setLevelColorAndBrightness&quot; block=&quot;%ring set level-%level=christmasring_levels color to %color=christmasring_pickColorHue and led brightness to %brightness&quot;" line473="        //% ring.defl=ring" line474="        //% weight=90 blockGap=8" line475="        //% parts=&quot;christmasring&quot;" line476="        public setLevelColorAndBrightness(level: number, color: number, brightness: number): void {" line477="            this.setLevelColor(level, neopixel.hsl(color, 100, brightness))" line478="        }" line479="" line480="        /**" line481="         * Set specfic level to different color " line482="         * (0 = level-1, 1 = level-2, etc...)" line483="         */" line484="        //% blockId=&quot;christmasring_setLevelColor&quot; block=&quot;%ring set level-%level=christmasring_levels led to %color=neopixel_colors&quot;" line485="        //% ring.defl=ring" line486="        //% weight=90 blockGap=8" line487="        //% parts=&quot;christmasring&quot;" line488="        public setLevelColor(level: number, color: number): void {" line489="            this.strip.setPixelColor(level, color)" line490="            //this.strip.setPixelColor(39 - level, color)" line491="            //this.strip.setPixelColor(level + 41, color)" line492="            //this.strip.setPixelColor(81 - level, color)" line493="" line494="            //if(level==this.numOfLEDPerPillar-1){" line495="            //    this.strip.setPixelColor(19, color)" line496="            //    this.strip.setPixelColor(20, color)" line497="            //    this.strip.setPixelColor(60, color)" line498="            //    this.strip.setPixelColor(61, color)" line499="            //    this.strip.setPixelColor(62, color)" line500="            //}" line501="        }" line502="" line503="        /**" line504="         * Set pixel color " line505="         * (0 = index-1, 1 = index-2, etc...)" line506="         */" line507="        //% blockId=&quot;christmasring_setPixelColor&quot; block=&quot;%ring set pixel-%index led to %color=neopixel_colors&quot;" line508="        //% ring.defl=ring" line509="        //% weight=90 blockGap=8" line510="        //% parts=&quot;christmasring&quot;" line511="        public setPixelColor(index: number, color: number): void {" line512="            this.strip.setPixelColor(index, color)" line513="        }" line514="" line515="        public easeInOutQuad(_percent: number, _elapsed: number, _start: number, _end: number) {" line516="            _percent /= _end / 2;" line517="" line518="            if (_percent &lt; 1) {" line519="                return _start / 2 * _percent * _percent + _elapsed" line520="            }" line521="            _percent += -1" line522="            return (0 - _start) / 2 * (_percent * (_percent - 2) - 1) + _elapsed" line523="        }" line524="    }" line525="    /**" line526="      * Create a new Christmas Ring controller." line527="      * @param mode the default mode where the Christmas ring default setting." line528="      */" line529="    //% blockId=&quot;christmasring_create&quot; block=&quot;Create christmas ring&quot;" line530="    //% weight=90 blockGap=8" line531="    //% parts=&quot;christmasring&quot;" line532="    //% trackArgs=0,1" line533="    //% blockSetVariable=ring" line534="    export function create(): ChristmasWreath {" line535="        let ring = new ChristmasWreath();" line536="        ring.mode = LEDMode.Rainbow;" line537="        ring.numOfLEDPerPillar = 15;" line538="        ring.totalNumLeds = 30;" line539="        ring.strip = neopixel.create(DigitalPin.P2, ring.totalNumLeds, NeoPixelMode.RGB);" line540="        ring.rainbowSpeed = 1;" line541="" line542="        ring.updateVars();" line543="        return ring;" line544="    }" line545="" line546="    /**" line547="     * Gets the level value of a known levels" line548="    */" line549="    //% weight=2 blockGap=8" line550="    //% blockId=&quot;christmasring_levels&quot; block=&quot;%level&quot;" line551="    //% advanced=true" line552="    export function levels(_level: Level): number {" line553="        return _level;" line554="    }" line555="" line556="" line557="    " line558="" line559="    /**" line560="     * Gets hue color" line561="    */" line562="    //% weight=2 blockGap=8" line563="    //% blockId=&quot;christmasring_pickColors&quot; block=&quot;HueColor $color&quot;" line564="    //% color.shadow=&quot;colorWheelHsvPicker&quot;" line565="    export function hueColor(color: number): number {" line566="        return neopixel.hsl(color / 255 * 360, 100, 50);" line567="    }" line568="" line569="    /**" line570="     * Gets color hue" line571="    */" line572="    //% weight=2 blockGap=8" line573="    //% blockId=&quot;christmasring_pickColorHue&quot; block=&quot;Hue $color&quot;" line574="    //% color.shadow=&quot;colorWheelHsvPicker&quot;" line575="    export function hue(color: number): number {" line576="        return (color % 255) / 255 * 360;" line577="    }" line578="" line579="    //% block=&quot;show wheel $color&quot;" line580="    //% color.shadow=&quot;colorWheelPicker&quot;" line581="    export function showColorWheel(color: number): number {" line582="        let getWheelColor = function (color: number): number {" line583="            let colorWheel = [" line584="                { r: 0, g: 255, b: 255 }," line585="                { r: 60, g: 195, b: 255 }," line586="                { r: 120, g: 135, b: 255 }," line587="                { r: 180, g: 75, b: 255 }," line588="                { r: 240, g: 15, b: 255 }," line589="                { r: 255, g: 45, b: 210 }," line590="                { r: 255, g: 105, b: 150 }," line591="                { r: 255, g: 165, b: 90 }," line592="                { r: 255, g: 225, b: 30 }," line593="                { r: 225, g: 255, b: 30 }," line594="                { r: 165, g: 255, b: 90 }," line595="                { r: 105, g: 255, b: 150 }," line596="                { r: 45, g: 255, b: 210 }" line597="            ];" line598="" line599="            let lerp = function (start: number, end: number, amt: number): number {" line600="                return (1 - amt) * start + amt * end" line601="            }" line602="            color = color &gt;&gt; 0;" line603="            color = (color &gt; 255) ? 255 : color;" line604="            let _percent = color / 256;" line605="            let b_index = Math.floor(_percent * colorWheel.length);" line606="            let e_index = b_index + 1;" line607="            e_index = (e_index &gt; colorWheel.length - 1) ? colorWheel.length - 1 : e_index" line608="" line609="            let start = { r: colorWheel[b_index].r, g: colorWheel[b_index].g, b: colorWheel[b_index].b }" line610="            let end = { r: colorWheel[e_index].r, g: colorWheel[e_index].g, b: colorWheel[e_index].b }" line611="            let u = _percent * colorWheel.length - 1." line612="            u = u - Math.floor(u);" line613="" line614="            let s = Math.round(lerp(start.r, end.r, u));" line615="            let h = Math.round(lerp(start.g, end.g, u));" line616="            let c = Math.round(lerp(start.b, end.b, u));" line617="            let colorname = 'rgb(' + s + ',' + h + ',' + c + ')';" line618="            console.log(colorname);" line619="" line620="            let fullColorHex = function (r: number, g: number, b: number): number {                " line621="                return ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b);" line622="            }" line623="            let colorNumber = fullColorHex(s, h, c);" line624="            " line625="            let hexToRgb = function (hex: number):string {" line626="                console.log(&quot;hex&quot; + hex);" line627="                let RR = '' + (hex &gt;&gt; 16).toString();" line628="                let GG = ''; //(hex &gt;&gt; 8).toString();" line629="                let BB = ''; //(hex &gt;&gt; 0).toString();" line630="                return &quot;&quot; + RR + GG + BB;" line631="            }" line632="            console.log(&quot;colorNumber = &quot; + hexToRgb(colorNumber) );" line633="            return colorNumber;" line634="" line635="        }" line636="        return getWheelColor(color);        " line637="    }" line638="" line639="    //% block=&quot;show wheel hsv $color&quot;" line640="    //% color.shadow=&quot;colorWheelHsvPicker&quot;" line641="    export function showColorWheelHsv(color: number): number {" line642="        return (color % 255) / 255 * 360;" line643="    }" line644="}" numlines="645"></mutation><next><block type="device_show_leds" id="CLRd=PLfC|J5hUXg%~]F"><field name="LEDS">`
        # . # . . 
        # . # . . 
        # # . . . 
        # . # . . 
        # . # . .
        `</field><next><block type="variables_set" id="W;^^q2CF)AZlIpRjexq9"><field name="VAR" id="bj{]oKepUuR-eYJXs[dp">colorList</field><value name="VALUE"><shadow type="math_number" id="s=I(_lQNtL;^jV}qm,Yw"><field name="NUM">0</field></shadow></value><next><block type="variables_set" id="G*cX|:aTPePR[ZI6NU$w"><field name="VAR" id="^;Reqi,L`#T!uB;G-!p~">ring2</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="christmasring_create" id="hD096$*m3}H=q_eA?i_y"/></value><next><block type="christmasring_changeMode" id="7v`2$0[oRZ)zfnsd$3:f"><field name="mode">LEDMode.Rainbow</field><value name="ring"><block type="variables_get" id="1o5+@cG;zv#SK6Zc,Y*_"><field name="VAR" id="^;Reqi,L`#T!uB;G-!p~">ring2</field></block></value><next><block type="christmasring_showStrip" id="EI{zJKjwk.-|IH2SCpKA"><value name="ring"><block type="variables_get" id="61i!Ux57jLCrx%qLQDMX"><field name="VAR" id="^;Reqi,L`#T!uB;G-!p~">ring2</field></block></value><next><block type="variables_set" id="cy]WeHflVdi[FFg]Hm6+"><field name="VAR" id=";*y]Pw{jSPFJ^P|2mWb%">speed</field><value name="VALUE"><shadow type="math_number" id="MnOxVpdQu6zxX_`WwPw/"><field name="NUM">1</field></shadow></value><next><block type="christmasring_setColorPattern" id="z`?YYo_gVp@9NyML#*$:"><value name="ring"><block type="variables_get" id="qm;CYN)AI#LniEyh,cSg"><field name="VAR" id="^;Reqi,L`#T!uB;G-!p~">ring2</field></block></value><value name="colorList"><block type="lists_create_with" id="lb^ZGA+8(.EXqndWo]PR" inline="false"><mutation items="7" horizontalafter="3"/><value name="ADD0"><block type="ChristmasWreath_showColorWheel" id="!B}bAb0oH@z3[EfcF#,}"><value name="color"><shadow type="colorWheelPicker" id="BPg7UU-gBA=AO//nx32#"><field name="value">0</field></shadow></value></block></value><value name="ADD1"><block type="ChristmasWreath_showColorWheel" id="|/Y.EB41T:g7##UW]W)4"><value name="color"><shadow type="colorWheelPicker" id="cyxWgt5n6cJ[?j1p[esc"><field name="value">9</field></shadow></value></block></value><value name="ADD2"><block type="ChristmasWreath_showColorWheel" id="0g`/PTn$+|q:.$`xGOdz"><value name="color"><shadow type="colorWheelPicker" id="#.-hzB7sNQ8F2ejc6Q1U"><field name="value">43</field></shadow></value></block></value><value name="ADD3"><block type="christmasring_pickColors" id="!?y?D}XAt1[o#?YAWlGn"><value name="color"><shadow type="colorWheelHsvPicker" id="h=`va=!T%o=Ks55.TztV"><field name="value">0</field></shadow></value></block></value><value name="ADD4"><block type="ChristmasWreath_showColorWheel" id="LyHVPzs=@s_C@.vW*F}v"><value name="color"><shadow type="colorWheelPicker" id="W~*(|1IuBvt9@!j+ZMbV"><field name="value">180</field></shadow></value></block></value><value name="ADD5"><block type="ChristmasWreath_showColorWheel" id="+)*Sy:!^y545B@*I(c4S"><value name="color"><shadow type="colorWheelPicker" id="jtux=eCLs@3AN{,jeZ.0"><field name="value">169</field></shadow></value></block></value><value name="ADD6"><block type="ChristmasWreath_showColorWheel" id="LCz%vg_%9bI/!y_REWJ@"><value name="color"><shadow type="colorWheelPicker" id="D2j?,bT_Rgw-+]q?qpSz"><field name="value">230</field></shadow></value></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_button_event" id="N-J)m#Bv#*wx:3l$0_1j" x="1829" y="20"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="variables_set" id="C4oCw@_Whd+S`Pq.Cr1b"><field name="VAR" id=";*y]Pw{jSPFJ^P|2mWb%">speed</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id="6I(*@G#v+zSE3`84!AzZ"><field name="OP">ADD</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="t1FBhGh3jC;(~?gt1pzJ"><field name="VAR" id=";*y]Pw{jSPFJ^P|2mWb%">speed</field></block></value><value name="B"><shadow type="math_number" id="N2r0ssCrZ`R3[n(}3i#~"><field name="NUM">1</field></shadow></value></block></value><next><block type="christmasring_setRingColor" id="9}tw!QQ[ZrF7V8=M+5i0"><value name="ring"><block type="variables_get" id="BY*j]ZqYQEbNFp[KZ4sW"><field name="VAR" id="^;Reqi,L`#T!uB;G-!p~">ring2</field></block></value><value name="color"><shadow type="neopixel_colors"/><block type="ChristmasWreath_showColorWheel" id="Qu}zI_Pmz#`sRXTg.@!/"><value name="color"><shadow type="colorWheelPicker" id="T]B8T9Hx[z@u*8ssXBqZ"><field name="value">255</field></shadow></value></block></value><next><block type="christmasring_showStrip" id="`GI@*yH{UCQ}jdM:I@9!"><comment pinned="false" h="80" w="160" relx="10" rely="10">ring2.showColor(neopixel.hsl(0, 0, 0))</comment><value name="ring"><block type="variables_get" id="gW?98Yd9kNqLJ!#C_]/I"><field name="VAR" id="^;Reqi,L`#T!uB;G-!p~">ring2</field></block></value></block></next></block></next></block></statement></block><block type="device_button_event" id="`y,:8im4d[Rko.cZZ(D9" x="2535" y="20"><field name="NAME">Button.B</field><statement name="HANDLER"><block type="variables_set" id=".%_:T4*/p]1l}VjpC5|U"><field name="VAR" id=";*y]Pw{jSPFJ^P|2mWb%">speed</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id="o~!4^gLvZwSkC,2n0R4:"><field name="OP">MINUS</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="XT=jTeY+=5C+!(hNj#~l"><field name="VAR" id=";*y]Pw{jSPFJ^P|2mWb%">speed</field></block></value><value name="B"><shadow type="math_number" id="X6ow0n#u;=vep+D{Qjjt"><field name="NUM">1</field></shadow></value></block></value><next><block type="christmasring_setRingColor" id="YkVR)gzRZYF+N?!Rwpuc"><value name="ring"><block type="variables_get" id="I=1)fn#]KuBTT+P7u}1;"><field name="VAR" id="^;Reqi,L`#T!uB;G-!p~">ring2</field></block></value><value name="color"><shadow type="neopixel_colors"/><block type="ChristmasWreath_showColorWheel" id="3y#r^06Xf}qiL41un?[V"><value name="color"><shadow type="colorWheelPicker" id="EKzx/uI[/%Li,X$_O7yr"><field name="value">45</field></shadow></value></block></value><next><block type="christmasring_showStrip" id="|sZEuJTUd5qG7a:Qd~(C"><comment pinned="false" h="80" w="160" relx="10" rely="10">ring2.showColor(neopixel.hsl(0, 0, 0))</comment><value name="ring"><block type="variables_get" id="@I*EAEFm}o#xxjil1r%@"><field name="VAR" id="^;Reqi,L`#T!uB;G-!p~">ring2</field></block></value></block></next></block></next></block></statement></block><block type="device_forever" id=",Mq*,)%j.sj,^XV9qNKm" x="3233" y="20"><statement name="HANDLER"><block type="christmasring_rainbowAnimation" id="jt7iYtVIK+EE{K{S6CC:"><value name="ring"><block type="variables_get" id="$jC%ru;:8am;zYGwmJnq"><field name="VAR" id="^;Reqi,L`#T!uB;G-!p~">ring2</field></block></value><value name="speed"><block type="variables_get" id="8w-=OAKKP]}i=-%j@a,7"><field name="VAR" id=";*y]Pw{jSPFJ^P|2mWb%">speed</field></block></value><next><block type="christmasring_showStrip" id="-20ca-KA?R#L#mgv3V6n"><comment pinned="false" h="80" w="160" relx="10" rely="10">ring2.setRingColor(ChristmasWreath.showColorWheel(45))
ring2.showColor(neopixel.hsl(0, 0, 0))</comment><value name="ring"><block type="variables_get" id="#GON*I*}~[#!3=[@IX7S"><field name="VAR" id="^;Reqi,L`#T!uB;G-!p~">ring2</field></block></value></block></next></block></statement></block><block type="lists_create_with" id="]sg`w]e2UT.pkrfw=mQ~" disabled="true" x="3893" y="20"><mutation items="3" horizontalafter="3"/><value name="ADD0"><block type="christmasring_pickColorHue" id="N^)XJ!iM$Tw8fI[tb3/b" disabled="true"><value name="color"><shadow type="colorWheelHsvPicker" id="A*OM!iv]3U8B-KXM$nHu" disabled="true"><field name="value">147</field></shadow></value></block></value><value name="ADD1"><block type="christmasring_pickColorHue" id="W:qDi5CQFbR~Ho{5JIjK" disabled="true"><value name="color"><shadow type="colorWheelHsvPicker" id="Yr3)_cekY/ZQ%@dvTmPh" disabled="true"><field name="value">193</field></shadow></value></block></value><value name="ADD2"><block type="christmasring_pickColorHue" id="K%%cmT3?+}U=lpj?u@oW" disabled="true"><value name="color"><shadow type="colorWheelHsvPicker" id="Q=D~ZqMxOd+5IUr|bZ@N" disabled="true"><field name="value">170</field></shadow></value></block></value></block><block type="variables_set" id="mvpnJ;`;ak#Z7s]AJ*^A" disabled="true" x="4417" y="20"><field name="VAR" id=";*y]Pw{jSPFJ^P|2mWb%">speed</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id="y?9TW1sCzkP9j-=ByE*q" disabled="true"><field name="OP">ADD</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="m,vUqNKodJ-v(hHE-ZJ2" disabled="true"><field name="VAR" id=";*y]Pw{jSPFJ^P|2mWb%">speed</field></block></value><value name="B"><shadow type="math_number" id="gYM|Ro)b-nXt#sAQ!6*%" disabled="true"><field name="NUM">1</field></shadow></value></block></value></block></xml>