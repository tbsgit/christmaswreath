<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="N7m9s~!Q:!R7_LTMC@iP">speed</variable><variable id=":[i]YoPmFck/aI#J{xT0">ring</variable><variable id="su?gxTrG6$^JU4B:JW=K">colorList</variable></variables><block type="pxt-on-start" id="8ZgJrM](ApSZ@5b.=_6k" x="95" y="15"><statement name="HANDLER"><block type="device_show_leds" id="!:onvb~xZ{WWXCTcnh#C"><field name="LEDS">`
        # . . . # 
        # . . . # 
        # . . . # 
        . . . . . 
        . . . . .
        `</field><next><block type="variables_set" id="a{J8||fcwCW=(:}@eMwn"><field name="VAR" id="su?gxTrG6$^JU4B:JW=K">colorList</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_create_with" id="s,[V|J25z^$IdA#gI])V" inline="false"><mutation items="15" horizontalafter="3"/><value name="ADD0"><block type="ChristmasWreath_showColorWheel" id="~3_|J,Vj_MLOVigmJtBj"><value name="color"><shadow type="colorWheelPicker" id="liE)V1Lc6e*UJ9QQjbW["><field name="value">108</field></shadow></value></block></value><value name="ADD1"><block type="ChristmasWreath_showColorWheel" id="4p.a20nTHX}V/5?wg-fT"><value name="color"><shadow type="colorWheelPicker" id="$ihwWfY)?M-Yce_(AK$Q"><field name="value">129</field></shadow></value></block></value><value name="ADD2"><block type="ChristmasWreath_showColorWheel" id="aA90S=:XWzq-j-w^=G!("><value name="color"><shadow type="colorWheelPicker" id="Z#io7{+5`q#CBIQwJQ.)"><field name="value">185</field></shadow></value></block></value><value name="ADD3"><block type="ChristmasWreath_showColorWheel" id="6}e3Y$Hgs/+OG/a!VvKp"><value name="color"><shadow type="colorWheelPicker" id="hXHR7B0*^udCJv?N??Y:"><field name="value">214</field></shadow></value></block></value><value name="ADD4"><block type="neopixel_rgb" id="}vZ:M@77k=i)HrI+@L/1"><value name="red"><shadow type="math_number" id="g[0/v:!VmC.IJ]*zzH]C"><field name="NUM">255</field></shadow></value><value name="green"><shadow type="math_number" id="U^yam0Cn[8gUhK@R~n_."><field name="NUM">0</field></shadow></value><value name="blue"><shadow type="math_number" id="zA/g:m$^-`DS/$7D4h}m"><field name="NUM">0</field></shadow></value></block></value><value name="ADD5"><block type="christmastree_pickColors" id="-1Yn_kRV{XoY#Zmf,GCC"><value name="color"><shadow type="colorWheelHsvPicker" id="9n[eiamd%GXhywCK`8x_"><field name="value">12</field></shadow></value></block></value><value name="ADD6"><block type="ChristmasWreath_showColorWheel" id="{n1A*}~GFqk%b,0DscNr"><value name="color"><shadow type="colorWheelPicker" id="E}!cZ5ZOun%dpwlWj%/d"><field name="value">120</field></shadow></value></block></value><value name="ADD7"><block type="ChristmasWreath_showColorWheel" id="/x7o:Wk/LE~_ZPclO7NO"><value name="color"><shadow type="colorWheelPicker" id="#g{H5)ABYU4T0A30ZSz*"><field name="value">129</field></shadow></value></block></value><value name="ADD8"><block type="ChristmasWreath_showColorWheel" id="cyz|Qc}pX/dcd15c?Wp-"><value name="color"><shadow type="colorWheelPicker" id="[w_#xuNz[*Fb]2r2b+Vh"><field name="value">149</field></shadow></value></block></value><value name="ADD9"><block type="ChristmasWreath_showColorWheel" id="C6XEES[*#$+v+SD.3ddx"><value name="color"><shadow type="colorWheelPicker" id="sfkc[T1!/r}(Hf|A6t?0"><field name="value">185</field></shadow></value></block></value><value name="ADD10"><block type="ChristmasWreath_showColorWheel" id="8%j.o}`byfM_}#v{kA;$"><value name="color"><shadow type="colorWheelPicker" id="^)6o!x`8]G9^_?ZG8#1w"><field name="value">214</field></shadow></value></block></value><value name="ADD11"><block type="neopixel_rgb" id="ySS;jq297;.L,67]0J~N"><value name="red"><shadow type="math_number" id="0LrDZ[5VJSD|Alxy!KQR"><field name="NUM">0</field></shadow></value><value name="green"><shadow type="math_number" id="Y%KzlO]^BzfRA2Ry^72s"><field name="NUM">0</field></shadow></value><value name="blue"><shadow type="math_number" id="7y,ruP%;0VUGB$bhla:K"><field name="NUM">255</field></shadow></value></block></value><value name="ADD12"><block type="christmastree_pickColors" id=";*2lC)U|Bo!cAeKejZlK"><value name="color"><shadow type="colorWheelHsvPicker" id="s1+q`zA-;T%oJde6=LW~"><field name="value">12</field></shadow></value></block></value><value name="ADD13"><block type="ChristmasWreath_showColorWheel" id="w3H+H)w?u^Yl|*+G]unp"><value name="color"><shadow type="colorWheelPicker" id="ih-.1EJO/4|nygq=-AL,"><field name="value">120</field></shadow></value></block></value><value name="ADD14"><block type="ChristmasWreath_showColorWheel" id="JE?oa.K88ZrS${E}b[$B"><value name="color"><shadow type="colorWheelPicker" id="S#~H)Ihinwc9e:uSFgp#"><field name="value">149</field></shadow></value></block></value></block></value><next><block type="variables_set" id="[)Z-^ly]crWCKfGY0Re)"><field name="VAR" id=":[i]YoPmFck/aI#J{xT0">ring</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="christmasring_create" id="M8wSI[jenJe}toeQ8QyC"/></value><next><block type="christmasring_changeMode" id="3=BvCn!(4DUzey1k(F(%"><field name="mode">LEDMode.Rainbow</field><value name="ring"><block type="variables_get" id="Nf}3w2f{[Glj227cGjLA"><field name="VAR" id=":[i]YoPmFck/aI#J{xT0">ring</field></block></value><next><block type="christmasring_showStrip" id="uuMD=hz$!=A9}L8s]wj+"><value name="ring"><block type="variables_get" id="Q|q8ErOpZRby`DdBKrOm"><field name="VAR" id=":[i]YoPmFck/aI#J{xT0">ring</field></block></value><next><block type="variables_set" id="t|OTMGt;n@{EDSA-?8[T"><field name="VAR" id="N7m9s~!Q:!R7_LTMC@iP">speed</field><value name="VALUE"><shadow type="math_number" id="m+K9G^;M[M10+xc!z0zV"><field name="NUM">0</field></shadow></value><next><block type="christmasring_setColorPattern" id="*?d:,*+NoSz*diqyb+uQ"><value name="ring"><block type="variables_get" id="NE5-qsdjyEA;%0!WT~l:"><field name="VAR" id=":[i]YoPmFck/aI#J{xT0">ring</field></block></value><value name="colorList"><block type="variables_get" id="y#WxPkjY3yNS5b4u$a|N"><field name="VAR" id="su?gxTrG6$^JU4B:JW=K">colorList</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_button_event" id="^+Id|}k]Z3^K{{vv=GD!" x="628" y="27"><field name="NAME">Button.B</field><statement name="HANDLER"><block type="variables_set" id="znyldAlZ(Ry!xB%f?g)@"><field name="VAR" id="N7m9s~!Q:!R7_LTMC@iP">speed</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id=",]1)|$X}[?e!r3?D}8h5"><field name="OP">MINUS</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="mSZ/h:w-#]SdY+x~[uKJ"><field name="VAR" id="N7m9s~!Q:!R7_LTMC@iP">speed</field></block></value><value name="B"><shadow type="math_number" id="-Z;?JB0lSL#wOe3nIlyR"><field name="NUM">1</field></shadow></value></block></value><next><block type="christmasring_showStrip" id="uL//nEvDt3gsnN2%%%-%"><comment pinned="false" h="80" w="160" relx="10" rely="10">ring2.setRingColor(ChristmasWreath.showColorWheel(45))
ring2.showColor(neopixel.hsl(0, 0, 0))</comment><value name="ring"><block type="variables_get" id="GBH]v3v5OAOMF2*v+/?+"><field name="VAR" id=":[i]YoPmFck/aI#J{xT0">ring</field></block></value></block></next></block></statement></block><block type="device_forever" id="]]6Z?e,Hi,7F4g]l6]^n" x="1017" y="33"><statement name="HANDLER"><block type="christmasring_rainbowAnimation" id="d);.jHujB+^LB%U(?xU-"><value name="ring"><block type="variables_get" id="J.A{vh|-0h/WbHiR=??_"><field name="VAR" id=":[i]YoPmFck/aI#J{xT0">ring</field></block></value><value name="speed"><block type="variables_get" id="N%,0bXdXjpRtUloC2$rZ"><field name="VAR" id="N7m9s~!Q:!R7_LTMC@iP">speed</field></block></value><next><block type="christmasring_showStrip" id="6^ecS3G,C8@XU7uG^OwK"><comment pinned="false" h="80" w="160" relx="10" rely="10">ring2.setRingColor(ChristmasWreath.showColorWheel(45))
ring2.showColor(neopixel.hsl(0, 0, 0))</comment><value name="ring"><block type="variables_get" id="Dd){p1(z0ZZ^mzpUhitc"><field name="VAR" id=":[i]YoPmFck/aI#J{xT0">ring</field></block></value></block></next></block></statement></block><block type="device_show_leds" id=",av:a)iqDwTUtJN0$ycT" disabled="true" x="1834" y="10"><field name="LEDS">`
        # # # . # 
        . . . . . 
        . . . . . 
        . . . . . 
        . . . . .
        `</field></block><block type="lists_create_with" id="SIiOwFdNe*q],8aCSYdz" inline="false" disabled="true" x="2055" y="10"><mutation items="8" horizontalafter="3"/><value name="ADD0"><block type="ChristmasWreath_showColorWheel" id=".@[l?SK{~f}{u$@FZ~R}" disabled="true"><value name="color"><shadow type="colorWheelPicker" id="08#/RP4sJDB@u7?#AhtN" disabled="true"><field name="value">0</field></shadow></value></block></value><value name="ADD1"><block type="ChristmasWreath_showColorWheel" id="IJQ.*9W!teBz}0v{lBou" disabled="true"><value name="color"><shadow type="colorWheelPicker" id="FK]m/RjVr1t=m@V%_DYB" disabled="true"><field name="value">9</field></shadow></value></block></value></block><block type="typescript_statement" id="9iKGBZHpZ2tROIzAac.h" disabled="true" editable="false" x="2313" y="10"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let speed = 0" numlines="1" declaredvars="speed"></mutation></block><block type="typescript_statement" id="@qAhpC~jg^Zl~?54%!#z" disabled="true" editable="false" x="2488" y="10"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum LEDMode {" line1="    //% block=&quot;Rainbow Mode&quot;" line2="    Rainbow = 0," line3="    //% block=&quot;Equalizer Mode&quot;" line4="    Equalizer = 1," line5="    //% block=&quot;Breath Mode&quot;" line6="    Breath = 2," line7="    //% block=&quot;Directional Mode&quot;" line8="    Rise = 3," line9="    //% block=&quot;Free Mode&quot;" line10="    Free = 4" line11="}" numlines="12"></mutation></block><block type="typescript_statement" id="@Dj(h6@E%Pkb}t$+.7c+" disabled="true" editable="false" x="2830" y="10"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Level {" line1="    //% block=&quot;Level 1&quot;" line2="    Level_1 = 0," line3="    //% block=&quot;Level 2&quot;" line4="    Level_2 = 1," line5="    //% block=&quot;Level 3&quot;" line6="    Level_3 = 2," line7="    //% block=&quot;Level 4&quot;" line8="    Level_4 = 3," line9="    //% block=&quot;Level 5&quot;" line10="    Level_5 = 4," line11="    //% block=&quot;Level 6&quot;" line12="    Level_6 = 5," line13="    //% block=&quot;Level 7&quot;" line14="    Level_7 = 6," line15="    //% block=&quot;Level 6&quot;" line16="    Level_8 = 7," line17="    //% block=&quot;Level 9&quot;" line18="    Level_9 = 8," line19="    //% block=&quot;Level 10&quot;" line20="    Level_10 = 9," line21="    //% block=&quot;Level 11&quot;" line22="    Level_11 = 10," line23="    //% block=&quot;Level 12&quot;" line24="    Level_12 = 11," line25="    //% block=&quot;Level 13&quot;" line26="    Level_13 = 12," line27="    //% block=&quot;Level 14&quot;" line28="    Level_14 = 13," line29="    //% block=&quot;Level 15&quot;" line30="    Level_15 = 14" line31="}" numlines="32"></mutation></block><block type="typescript_statement" id="ce#CJ.|W4RohIiac(f.6" disabled="true" editable="false" x="3103" y="10"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ChristmasWreath {" line1="    /**" line2="     * A ChristmasWreath ring" line3="     */" line4="" line5="    class RGBVector3 {" line6="        public r: number;" line7="        public g: number;" line8="        public b: number;" line9="" line10="        constructor(r: number, g: number, b: number) {" line11="            this.r = r;" line12="            this.g = g;" line13="            this.b = b;" line14="        }" line15="    }" line16="" line17="    export class ChristmasWreath {" line18="        mode: LEDMode;" line19="        strip: neopixel.Strip;" line20="        //numOfLEDs: number;" line21="        totalNumLeds: number;" line22="        numOfLEDPerPillar: number;" line23="" line24="        private _colorStep: number;" line25="" line26="        private _lastMicVal: number;" line27="        private _colorOffset: number;" line28="" line29="        rainbowSpeed: number;" line30="        private _isSetupRainbow: boolean;" line31="" line32="" line33="        private _breathT: number;" line34="        private _breathDir: number;" line35="        private _breathColorOffset: number;" line36="" line37="        private _riseDuration: number;" line38="        private _riseState: number[];" line39="        private _riseColor: number[];" line40="" line41="        private _colorList: number[];" line42="" line43="" line44="        public updateVars(): void {" line45="            this._colorStep = 360 / this.numOfLEDPerPillar;" line46="            this._colorOffset = 0;" line47="            this._lastMicVal = -1;" line48="            this._breathT = 0;" line49="            this._breathDir = 1;" line50="            this._breathColorOffset = 0;" line51="" line52="            this._riseState = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]" line53="            this._riseColor = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]" line54="            this._riseDuration = 3;" line55="" line56="        }" line57="" line58="" line59=" " line60="" line61="" line62="        /**" line63="         * Clear strip led color" line64="         */" line65="        //% blockId=&quot;christmasring_clearStrip&quot; block=&quot;%ring clear led color&quot;" line66="        //% ring.defl=ring" line67="        //% weight=90 blockGap=8" line68="        //% parts=&quot;christmasring&quot;" line69="        public clearStrip(): void {" line70="            this.strip.clear();" line71="        }" line72="" line73="        /**" line74="         * Show strip led color" line75="         */" line76="        //% blockId=&quot;christmasring_showStrip&quot; block=&quot;%ring show led color&quot;" line77="        //% ring.defl=ring" line78="        //% weight=90 blockGap=8" line79="        //% parts=&quot;christmasring&quot;" line80="        public showStrip(): void {" line81="            this.strip.show();" line82="        }" line83="" line84="        /**" line85="         * Shows a rainbow pattern on all LEDs." line86="         * @param startHue the start hue value for the rainbow, eg: 1" line87="         * @param endHue the end hue value for the rainbow, eg: 360" line88="         */" line89="        //% blockId=&quot;christmasring_changeMode&quot; block=&quot;%ring|change mode to %mode&quot;" line90="        //% ring.defl=ring" line91="        //% weight=85 blockGap=8" line92="        //% parts=&quot;christmasring&quot;" line93="        public changeMode(m: LEDMode): void {" line94="            this._isSetupRainbow = false;" line95="            this.mode = m;" line96="        }" line97="" line98="        /**" line99="         * Shows a rainbow pattern on all LEDs." line100="         * @param startHue the start hue value for the rainbow, eg: 1" line101="         * @param endHue the end hue value for the rainbow, eg: 360" line102="         */" line103="        //% blockId=&quot;christmasring_rotatePixelColor&quot; block=&quot;%ring|move pixel by %mode|pixel&quot;" line104="        //% ring.defl=ring" line105="        //% weight=85 blockGap=8" line106="        //% parts=&quot;christmasring&quot;" line107="        public rotatePixelColor(speed: number): void {" line108="            this.rainbowSpeed = speed;" line109="            if (this.rainbowSpeed &gt; 5) {" line110="                this.rainbowSpeed = 5;" line111="            }" line112="            if (this.rainbowSpeed &lt; -5) {" line113="                this.rainbowSpeed = -5;" line114="            }" line115="            this.strip.rotate(this.rainbowSpeed);" line116="        }" line117="" line118="        /**" line119="         * Play next animation" line120="         */" line121="        //% blockId=&quot;christmasring_nextMode&quot; block=&quot;%ring play next mode&quot;" line122="        //% ring.defl=ring" line123="        //% weight=90 blockGap=8" line124="        //% parts=&quot;christmasring&quot;" line125="        public nextMode(): void {" line126="            this._isSetupRainbow = false;" line127="            this.mode += 1;" line128="            if (this.mode &gt;= 4) {" line129="                this.mode = 0;" line130="            }" line131="        }" line132="" line133="        /**" line134="         * Play previous animation" line135="         */" line136="        //% blockId=&quot;christmasring_previousMode&quot; block=&quot;%ring play previous mode&quot;" line137="        //% ring.defl=ring" line138="        //% weight=90 blockGap=8" line139="        //% parts=&quot;christmasring&quot;" line140="        public previousMode(): void {" line141="            this._isSetupRainbow = false;" line142="            this.mode -= 1;" line143="            if (this.mode &lt;= 0) {" line144="                this.mode = 3;" line145="            }" line146="        }" line147="" line148="        /**" line149="         * Update animation" line150="         */" line151="        //% blockId=&quot;christmasring_update&quot; block=&quot;%ring update lighting animation&quot;" line152="        //% ring.defl=ring" line153="        //% weight=90 blockGap=8" line154="        //% parts=&quot;christmasring&quot;" line155="        public update(): void {" line156="            if (this.mode == 0) {" line157="                this.rainbowAnimation(this.rainbowSpeed);" line158="                this.showStrip();" line159="                basic.pause(100);" line160="            } else if (this.mode == 1) {" line161="                let mic = 128" line162="                try {" line163="                    mic = input.soundLevel()" line164="                } catch (err) {" line165="                    mic = 128" line166="                }" line167="                this.equalizerAnimation(mic);" line168="                this.showStrip();" line169="                basic.pause(1);" line170="            } else if (this.mode == 2) {" line171="                this.breathAnimation();" line172="                this.showStrip();" line173="            } else if (this.mode == 3) {" line174="                let mic2 = 128" line175="                try {" line176="                    mic2 = input.soundLevel()" line177="                } catch (err2) {" line178="                    mic2 = 128" line179="                }" line180="                this.riseAnimation(mic2, 100)" line181="                this.showStrip();" line182="            } else {" line183="                this.showStrip();" line184="            }" line185="            this._colorOffset += 1;" line186="            this._breathColorOffset += 1;" line187="            this._breathT += 1;" line188="" line189="            if (this._colorOffset &gt; 360) {" line190="                this._colorOffset = 0;" line191="            }" line192="            if (this._breathT &gt; 100) {" line193="                this._breathT = 1;" line194="            }" line195="        }" line196="" line197="        private applyColorPattern() {" line198="            if (!this._colorList)  {" line199="                this._colorList = [0xFF8522, 0xBAA550, 0x30ba2c];" line200="            }" line201="            if (this._colorList.length == 0) {" line202="                this._colorList = [0xFF8522," line203="                                    0xBAA550," line204="                                    0x30ba2c]" line205="            }" line206="            if (this._colorList.length == 1) {" line207="                this._colorList[1] = this._colorList[0];" line208="            }" line209="            let colorArray = [];" line210="            for (let i = 0; i &lt; this._colorList.length; i++) {" line211="                let _r = (this._colorList[i] &gt;&gt; 16) &amp; 255;" line212="                let _g = (this._colorList[i] &gt;&gt; 8) &amp; 255;" line213="                let _b = this._colorList[i] &amp; 255;" line214="                colorArray[i] = {" line215="                    r: _r," line216="                    g: _g," line217="                    b: _b," line218="                }" line219="            }" line220="" line221="            // let colorArray = [new RGBVector3(255, 169, 0)," line222="            //     new RGBVector3(249, 209, 0)," line223="            //     new RGBVector3(116, 213, 245)," line224="            //     new RGBVector3(255, 38, 141)," line225="            //     new RGBVector3(145, 52, 137)," line226="            //     new RGBVector3(255, 169, 0)];" line227="" line228="            let arrayIndex = 0;" line229="            if (colorArray.length &lt;= 1) {" line230="                console.log('Error!');                " line231="            }" line232="            for (let index = 0; index &lt; colorArray.length - 1; index++) {" line233="                let r = colorArray[index].r;" line234="                let g = colorArray[index].g;" line235="                let b = colorArray[index].b;" line236="" line237="                let rD = colorArray[index + 1].r;" line238="                let gD = colorArray[index + 1].g;" line239="                let bD = colorArray[index + 1].b;" line240="" line241="                let num_step = Math.floor(this.totalNumLeds / (colorArray.length - 1));" line242="                let small_step = 1 / num_step;" line243="" line244="                for (let jj = 1; jj &lt;= num_step; jj++) {                    " line245="                    let amount = small_step * jj;" line246="                    let r_0 = this.lerp(r, rD, amount);" line247="                    let g_0 = this.lerp(g, gD, amount);" line248="                    let b_0 = this.lerp(b, bD, amount);" line249="" line250="                    this.strip.setPixelColor(arrayIndex, neopixel.rgb(r_0, g_0, b_0));" line251="                    arrayIndex++;" line252="                }" line253="            }" line254="        }" line255="" line256="        /**" line257="         * Set color pattern list" line258="        * (0, 1, 2, 3, etc...)" line259="        */" line260="        //% blockId=&quot;christmasring_setColorPattern&quot; block=&quot;%ring|set color pattern to %colorList to &quot;" line261="        //% ring.defl=ring" line262="        //% weight=90 blockGap=8" line263="        //% parts=&quot;christmasring&quot;" line264="        public setColorPattern(colorList: number[]): void {" line265="            " line266="            this._colorList = colorList;" line267="            console.log(&quot;colorList.length = &quot; + this._colorList.length);" line268="            // for (let j =0; j &lt; colorList.length; j++){" line269="            //     this._colorList[j] = colorList[j];" line270="            // }            " line271="            this.applyColorPattern();" line272="        }" line273="" line274="        /**" line275="         * Set leds strip to rainbow pattern." line276="         */" line277="        //% blockId=&quot;christmasring_showRainbow&quot; block=&quot;%ring|set to rainbow pattern&quot;" line278="        //% ring.defl=ring" line279="        //% weight=85 blockGap=8" line280="        //% parts=&quot;christmasring&quot;" line281="        public showRainbow(): void {" line282="            this.strip.showRainbow();" line283="        }" line284="" line285="        " line286="" line287="        private lerp(x: number, y: number, a: number) {" line288="            return (1 - a) * x + a * y;" line289="        }" line290="" line291="        /**" line292="         * Play rainbow animation" line293="         */" line294="        //% blockId=&quot;christmasring_rainbowAnimation&quot; block=&quot;%ring play rainbow animation width speed%speed&quot;" line295="        //% ring.defl=ring" line296="        //% weight=90 blockGap=8" line297="        //% parts=&quot;christmasring&quot;" line298="        public rainbowAnimation(speed: number): void {" line299="            this.rainbowSpeed = speed;" line300="            if (this._isSetupRainbow == false || this._isSetupRainbow == null) {" line301="                this._isSetupRainbow = true;" line302="                this.strip.clear()" line303="                //this.strip.showRainbow(1, 360)" line304="                " line305="                this.applyColorPattern();" line306="                " line307="            }" line308="            this.rotatePixelColor(this.rainbowSpeed)" line309="        }" line310="" line311="        " line312="" line313="" line314="        /**" line315="         * Play equalizer animation" line316="         */" line317="        //% blockId=&quot;christmasring_equalizerAnimation&quot; block=&quot;%ring play equalizer animation with sound level%value&quot;" line318="        //% ring.defl=ring" line319="        //% weight=90 blockGap=8" line320="        //% parts=&quot;christmasring&quot;" line321="        public equalizerAnimation(micVal: number): void {" line322="            if (this._lastMicVal != -1) {" line323="                if (micVal &lt; this._lastMicVal) {" line324="                    micVal = micVal + ((this._lastMicVal - micVal) * 0.2)" line325="                } else {" line326="                    micVal = this._lastMicVal + ((micVal - this._lastMicVal) * 0.95)" line327="                }" line328="            }" line329="            this._lastMicVal = micVal;" line330="            let anchor: number = micVal / 100 * this.numOfLEDPerPillar" line331="" line332="            this.strip.clear()" line333="            for (let idx = 0; idx &lt;= this.numOfLEDPerPillar; idx++) {" line334="                let _color = idx * this._colorStep + this._colorOffset % 360" line335="                if (idx &lt;= anchor) {" line336="                    this.setLevelColor(idx, this.makeColor(_color, 100, 50))" line337="                } else {" line338="                    let _saturation: number = (45 - 5) * ((this.numOfLEDPerPillar - idx) / (this.numOfLEDPerPillar - anchor)) * 0.6" line339="                    let _brightness: number = (100 - 40) * ((this.numOfLEDPerPillar - idx) / (this.numOfLEDPerPillar - anchor)) * 1" line340="                    if (_saturation &lt; 5) {" line341="                        _saturation = 5" line342="                    }" line343="                    this.setLevelColor(idx, this.makeColor(_color, _saturation, _brightness))" line344="                }" line345="            }" line346="        }" line347="" line348="        /**" line349="         * Play breath animation" line350="         */" line351="        //% blockId=&quot;christmasring_breathAnimation&quot; block=&quot;%ring play breath animation&quot;" line352="        //% ring.defl=ring" line353="        //% weight=90 blockGap=8" line354="        //% parts=&quot;christmasring&quot;" line355="        public breathAnimation() {" line356="            if (this._breathT % 100 == 0) {" line357="                this._breathDir *= -1;" line358="            }" line359="            let breathB = 0;" line360="            if (this._breathDir == 1) {" line361="                breathB = this.easeInOutQuad(this._breathT % 100, 0, 100, 100)" line362="            } else {" line363="                breathB = 100 - this.easeInOutQuad(this._breathT % 100, 0, 100, 100)" line364="            }" line365="" line366="            this.strip.clear()" line367="            for (let index2 = 0; index2 &lt; this.numOfLEDPerPillar; index2++) {" line368="                let color = this.makeColor((this._breathColorOffset / 7 + (60 / this.numOfLEDPerPillar * index2)) % 360, 100, breathB * 0.45 + 5)" line369="                this.setLevelColor(index2, color)" line370="            }" line371="" line372="        }" line373="" line374="        /**" line375="         * Play rise animation" line376="         */" line377="        //% blockId=&quot;christmasring_riseAnimation&quot; block=&quot;%ring play rise animation with sound level%micVale and trigger threshold%threshold&quot;" line378="        //% ring.defl=ring" line379="        //% weight=90 blockGap=8" line380="        //% parts=&quot;christmasring&quot;" line381="        public riseAnimation(micVal: Number, threshold: Number): void {" line382="            let _duration = 3" line383="            if (micVal &gt; threshold) {" line384="                this.triggerRise(_duration)" line385="            }" line386="            this.moveRise()" line387="        }" line388="" line389="" line390="" line391="        /**" line392="         * Trigger rise led effect" line393="         */" line394="        //% blockId=&quot;christmasring_triggerRiseWithColor&quot; block=&quot;%ring trigger rise led effect with %duration|duration and %color|color&quot;" line395="        //% ring.defl=ring" line396="        //% weight=90 blockGap=8" line397="        //% parts=&quot;christmasring&quot;" line398="        public triggerRiseWithColor(duration: number, color: number): void {" line399="            this._riseDuration = duration" line400="            let _duration2 = this._riseDuration" line401="            this._riseState[0] = this._riseState[1] = _duration2" line402="            this._riseColor[0] = this._riseColor[1] = this.makeColor(color, 100, 50)" line403="        }" line404="" line405="" line406="        /**" line407="         * Trigger rise led effect" line408="         */" line409="        //% blockId=&quot;christmasring_triggerRise&quot; block=&quot;%ring trigger rise led effect with %duration|duration&quot;" line410="        //% ring.defl=ring" line411="        //% weight=90 blockGap=8" line412="        //% parts=&quot;christmasring&quot;" line413="        public triggerRise(duration: number): void {" line414="            this._riseDuration = duration" line415="            let _duration3 = this._riseDuration" line416="            this._riseState[0] = this._riseState[1] = _duration3" line417="            this._riseColor[0] = this._riseColor[1] = this.makeColor(Math.random() * 360, 100, 50)" line418="        }" line419="" line420="        /**" line421="         * Move rise led move upward" line422="         */" line423="        //% blockId=&quot;christmasring_moveRise&quot; block=&quot;%ring move rise led upward&quot;" line424="        //% ring.defl=ring" line425="        //% weight=90 blockGap=8" line426="        //% parts=&quot;christmasring&quot;" line427="        public moveRise(): void {" line428="            let _duration4 = this._riseDuration" line429="            this.strip.clear()" line430="" line431="            for (let level = 0; level &lt; this.numOfLEDPerPillar; level++) {" line432="                if (this._riseState[level] &gt; 0) {" line433="                    this.setLevelColor(level, this._riseColor[level])" line434="                    this._riseState[level] -= 1;" line435="                    if (this._riseState[level] == 0 &amp;&amp; level + 1 &lt; this.numOfLEDPerPillar) {" line436="                        this._riseState[level + 1] = _duration4 + 1;" line437="                        this._riseColor[level + 1] = this._riseColor[level]" line438="                    }" line439="                } else {" line440="                    this.setLevelColor(level, this.makeColor(30, 25, 10))" line441="                }" line442="            }" line443="        }" line444="" line445="        private makeColor(color: number, saturation: number, brightness: number): number {" line446="            return neopixel.hsl(color, saturation, brightness)" line447="        }" line448="" line449="        /**" line450="         * Set christmas ring color" line451="         */" line452="        //% blockId=&quot;christmasring_setRingColor&quot; block=&quot;%ring set christmas ring led color to %color=neopixel_colors&quot;" line453="        //% ring.defl=ring" line454="        //% weight=90 blockGap=8" line455="        //% parts=&quot;christmasring&quot;" line456="        public setRingColor(color: number): void {" line457="            for (let idx2 = 0; idx2 &lt;= 19; idx2++) {" line458="                this.setLevelColor(idx2, color)" line459="            }" line460="        }" line461="" line462="        /**" line463="         * Set christmas ring brightness" line464="         * value larger than 50 color will change to white" line465="         */" line466="        //% blockId=&quot;christmasring_setRingColorAndBrightness&quot; block=&quot;%ring set christmas ring color to %color=christmasring_pickColorHue and led brightness to %brightness&quot;" line467="        //% ring.defl=ring" line468="        //% weight=90 blockGap=8" line469="        //% parts=&quot;christmasring&quot;" line470="        public setRingColorAndBrightness(color: number, brightness: number): void {" line471="            for (let idx3 = 0; idx3 &lt;= 19; idx3++) {" line472="                this.setLevelColor(idx3, neopixel.hsl(color, 100, brightness))" line473="            }" line474="        }" line475="" line476="" line477="" line478="        /**" line479="         * Set christmas ring brightness" line480="         * Set specfic level to different color and brightness" line481="         * (0 = level-1, 1 = level-2, etc...)" line482="         */" line483="        //% blockId=&quot;christmasring_setLevelColorAndBrightness&quot; block=&quot;%ring set level-%level=christmasring_levels color to %color=christmasring_pickColorHue and led brightness to %brightness&quot;" line484="        //% ring.defl=ring" line485="        //% weight=90 blockGap=8" line486="        //% parts=&quot;christmasring&quot;" line487="        public setLevelColorAndBrightness(level: number, color: number, brightness: number): void {" line488="            this.setLevelColor(level, neopixel.hsl(color, 100, brightness))" line489="        }" line490="" line491="        /**" line492="         * Set specfic level to different color " line493="         * (0 = level-1, 1 = level-2, etc...)" line494="         */" line495="        //% blockId=&quot;christmasring_setLevelColor&quot; block=&quot;%ring set level-%level=christmasring_levels led to %color=neopixel_colors&quot;" line496="        //% ring.defl=ring" line497="        //% weight=90 blockGap=8" line498="        //% parts=&quot;christmasring&quot;" line499="        public setLevelColor(level: number, color: number): void {" line500="            this.strip.setPixelColor(level, color)" line501="            this.strip.setPixelColor(30 - level, color)" line502="            //this.strip.setPixelColor(level + 41, color)" line503="            //this.strip.setPixelColor(81 - level, color)" line504="" line505="            //if(level==this.numOfLEDPerPillar-1){" line506="            //    this.strip.setPixelColor(19, color)" line507="            //    this.strip.setPixelColor(20, color)" line508="            //    this.strip.setPixelColor(60, color)" line509="            //    this.strip.setPixelColor(61, color)" line510="            //    this.strip.setPixelColor(62, color)" line511="            //}" line512="        }" line513="" line514="        /**" line515="         * Set pixel color " line516="         * (0 = index-1, 1 = index-2, etc...)" line517="         */" line518="        //% blockId=&quot;christmasring_setPixelColor&quot; block=&quot;%ring set pixel-%index led to %color=neopixel_colors&quot;" line519="        //% ring.defl=ring" line520="        //% weight=90 blockGap=8" line521="        //% parts=&quot;christmasring&quot;" line522="        public setPixelColor(index: number, color: number): void {" line523="            this.strip.setPixelColor(index, color)" line524="        }" line525="" line526="        public easeInOutQuad(_percent: number, _elapsed: number, _start: number, _end: number) {" line527="            _percent /= _end / 2;" line528="" line529="            if (_percent &lt; 1) {" line530="                return _start / 2 * _percent * _percent + _elapsed" line531="            }" line532="            _percent += -1" line533="            return (0 - _start) / 2 * (_percent * (_percent - 2) - 1) + _elapsed" line534="        }" line535="    }" line536="    /**" line537="      * Create a new Christmas Ring controller." line538="      * @param mode the default mode where the Christmas ring default setting." line539="      */" line540="    //% blockId=&quot;christmasring_create&quot; block=&quot;Create christmas ring&quot;" line541="    //% weight=90 blockGap=8" line542="    //% parts=&quot;christmasring&quot;" line543="    //% trackArgs=0,1" line544="    //% blockSetVariable=ring" line545="    export function create(): ChristmasWreath {" line546="        let ring = new ChristmasWreath();" line547="        ring.mode = LEDMode.Rainbow;" line548="        ring.numOfLEDPerPillar = 15;" line549="        ring.totalNumLeds = 30;" line550="        ring.strip = neopixel.create(DigitalPin.P2, ring.totalNumLeds, NeoPixelMode.RGB);" line551="        ring.rainbowSpeed = 1;" line552="" line553="        ring.updateVars();" line554="        return ring;" line555="    }" line556="" line557="    /**" line558="     * Gets the level value of a known levels" line559="    */" line560="    //% weight=2 blockGap=8" line561="    //% blockId=&quot;christmasring_levels&quot; block=&quot;%level&quot;" line562="    //% advanced=true" line563="    export function levels(_level: Level): number {" line564="        return _level;" line565="    }" line566="" line567="" line568="    /**" line569="     * Gets hue color" line570="    */" line571="    //% weight=2 blockGap=8" line572="    //% blockId=&quot;christmastree_pickColors&quot; block=&quot;Hue Color $color&quot;" line573="    //% color.shadow=&quot;colorWheelHsvPicker&quot;" line574="    export function hueColor(color: number): number {" line575="        let s = (color / 255 * 360)" line576="        let h = (100);" line577="        let c = (50);" line578="" line579="        let color2 = (s &lt;&lt; 16) +  (h &lt;&lt; 8) +  (c);" line580="        let colorname = 'rgb(' + s + ',' + h + ',' + c + ')';" line581="        console.log(colorname);" line582="        return color2;" line583="    }" line584="" line585="    /**" line586="     * Gets gradient color" line587="    */" line588="    //% block=&quot;show color wheel $color&quot;" line589="    //% color.shadow=&quot;colorWheelPicker&quot;" line590="    //% advanced=true" line591="    export function showColorWheel(color: number): number {" line592="    " line593="        let colorWheel = [" line594="            { r: 0, g: 255, b: 255 }," line595="            { r: 60, g: 195, b: 255 }," line596="            { r: 120, g: 135, b: 255 }," line597="            { r: 180, g: 75, b: 255 }," line598="            { r: 240, g: 15, b: 255 }," line599="            { r: 255, g: 45, b: 210 }," line600="            { r: 255, g: 105, b: 150 }," line601="            { r: 255, g: 165, b: 90 }," line602="            { r: 255, g: 225, b: 30 }," line603="            { r: 225, g: 255, b: 30 }," line604="            { r: 165, g: 255, b: 90 }," line605="            { r: 105, g: 255, b: 150 }," line606="            { r: 45, g: 255, b: 210 }" line607="        ];" line608="" line609="        let lerp = function (start: number, end: number, amt: number): number {" line610="            return (1 - amt) * start + amt * end" line611="        }" line612="        color = color &gt;&gt; 0;" line613="        color = (color &gt; 255) ? 255 : color;" line614="        let _percent = color / 256;" line615="        let b_index = Math.floor(_percent * colorWheel.length);" line616="        let e_index = b_index + 1;" line617="        e_index = (e_index &gt; colorWheel.length - 1) ? colorWheel.length - 1 : e_index" line618="" line619="        let start = { r: colorWheel[b_index].r, g: colorWheel[b_index].g, b: colorWheel[b_index].b }" line620="        let end = { r: colorWheel[e_index].r, g: colorWheel[e_index].g, b: colorWheel[e_index].b }" line621="        let u = _percent * colorWheel.length - 1." line622="        u = u - Math.floor(u);" line623="" line624="        let t = Math.round(lerp(start.r, end.r, u));" line625="        let j = Math.round(lerp(start.g, end.g, u));" line626="        let d = Math.round(lerp(start.b, end.b, u));" line627="        let colorname2 = 'rgb(' + t + ',' + j + ',' + d + ')';" line628="        console.log(colorname2);" line629="" line630="        let fullColorHex = function (r: number, g: number, b: number): number {                " line631="            return ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b);" line632="        }" line633="        let colorInDecimal = fullColorHex(t,j,d);" line634="        " line635="        // let hexToRgb = function (hex: number):string {" line636="        //     console.log(&quot;hex&quot; + hex);" line637="        //     let RR = '' + (hex &gt;&gt; 16).toString();" line638="        //     let GG = ''; //(hex &gt;&gt; 8).toString();" line639="        //     let BB = ''; //(hex &gt;&gt; 0).toString();" line640="        //     return &quot;&quot; + RR + GG + BB;" line641="        // }" line642="        //console.log(&quot;rgb = &quot; + r + &quot;, &quot; +g  + &quot;,&quot; + b);   " line643="        return colorInDecimal;" line644="    }" line645="" line646="}" numlines="647"></mutation></block><block type="variables_set" id="+.aF/{m{u;e[)YW:*WbY" disabled="true" x="4844" y="10"><field name="VAR" id="su?gxTrG6$^JU4B:JW=K">colorList</field></block><block type="ChristmasWreath_showColorWheel" id="t_`OFz{X^=?SF[.xdx:3" disabled="true" x="5141" y="10"><value name="color"><shadow type="colorWheelPicker" id="zHsj~-2*QU|~0CeuGFNL" disabled="true"><field name="value">180</field></shadow></value></block><block type="input_logo_event" id="Yq]p|}Y@dwu;O]D57krt" x="631" y="247"><field name="action">TouchButtonEvent.Touched</field><statement name="HANDLER"><block type="christmasring_nextMode" id=";HQ9,y6lN)/r,8t!=q%7"><value name="ring"><block type="variables_get" id="w!@0q@l~fdWZ`b@Crl;D"><field name="VAR" id=":[i]YoPmFck/aI#J{xT0">ring</field></block></value></block></statement></block><block type="ChristmasWreath_showColorWheel" id="li(t`tp$OdQLQLSMxoG]" disabled="true" x="5400" y="10"><value name="color"><shadow type="colorWheelPicker" id="$Pi8#QZ6ilqo6UJ]c.kn" disabled="true"><field name="value">169</field></shadow></value></block><block type="ChristmasWreath_showColorWheel" id="Mru6*U208L}OFtq,nE[*" disabled="true" x="5658" y="10"><value name="color"><shadow type="colorWheelPicker" id="_UR@l]TTR65SGh_$D#KH" disabled="true"><field name="value">230</field></shadow></value></block><block type="ChristmasWreath_showColorWheel" id="C`E(.O^B%iJX1Dcg{$!4" disabled="true" x="5916" y="10"><value name="color"><shadow type="colorWheelPicker" id="]v$A9XQq[gTJQ!,@YZUt" disabled="true"><field name="value">0</field></shadow></value></block><block type="lists_create_with" id="T5.KLq_CL=;bwCjf*m/P" disabled="true" x="6166" y="10"><mutation items="3" horizontalafter="3"/></block><block type="device_button_event" id="M{NN1yZ;lgUSy(k5PgdF" x="661" y="399"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="variables_set" id="F[|?@7Yw,;$7)DtF.!mI"><field name="VAR" id="N7m9s~!Q:!R7_LTMC@iP">speed</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id="D?^yy!YP;xw#^NI(K,%("><field name="OP">ADD</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="G??!TJVX4N7zvtI`wf^L"><field name="VAR" id="N7m9s~!Q:!R7_LTMC@iP">speed</field></block></value><value name="B"><shadow type="math_number" id="6QcbMW3`u8O+E~]wm#[`"><field name="NUM">1</field></shadow></value></block></value><next><block type="christmasring_showStrip" id="YNB9l}n_`%b8co)}M*!x"><comment pinned="false" h="80" w="160" relx="10" rely="10">ring2.setRingColor(ChristmasWreath.showColorWheel(255))
ring2.showColor(neopixel.hsl(0, 0, 0))</comment><value name="ring"><block type="variables_get" id="gP{Q25Ki^~IlsmIUqPWB"><field name="VAR" id=":[i]YoPmFck/aI#J{xT0">ring</field></block></value></block></next></block></statement></block><block type="christmastree_pickColors" id="*u5rrt?~C?T%wJKB.r.@" disabled="true" x="365" y="579"><value name="color"><shadow type="colorWheelHsvPicker" id="n1H8MHbs`GxssBt^J[8c" disabled="true"><field name="value">0</field></shadow></value></block><block type="christmastree_pickColors" id="05+p$fRCgoku#6|z,g5." disabled="true" x="367" y="920"><value name="color"><shadow type="colorWheelHsvPicker" id=".1eBI]B_(`]NY~cpnSh4" disabled="true"><field name="value">0</field></shadow></value></block></xml>